#ifndef MODEL_H
#define MODEL_H
/**
 * @file model.h
 *
 * Define the UML model to interpret.
 *
 * This file is automatically generated by the uml-serializer-c tool.
 * Do not modify manually.
 *
 * @author Matthias Brun (matthias.brun@eseo.fr)
 * @author Valentin Besnard (valentin.besnard@eseo.fr)
 */

#include "types_calibration.h"
//#include "interpreter/interpreter.h"
#include "interpreter/active_object.h"
#include "interpreter/passive_object.h"

/**
 * Number of observers in the model (observers that are active objects).
 */
#define NB_OBSERVERS (0)

/**
 * Typedef for events parameters.
 */
typedef struct lightOn_signal_parameters lightOn_signal_parameters;
typedef struct lightOff_signal_parameters lightOff_signal_parameters;
typedef struct buttonPressed_signal_parameters buttonPressed_signal_parameters;
typedef struct buttonReleased_signal_parameters buttonReleased_signal_parameters;

/**
 * Typedef for events.
 */
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Typedef of store types.
 */
typedef struct LightPort_store LightPort_store;
typedef struct LightPort_od  LightPort_od;
typedef struct ButtonPort_store ButtonPort_store;
typedef struct ButtonPort_od  ButtonPort_od;
typedef struct System_store System_store;
typedef struct System_od  System_od;
typedef struct Controller_store Controller_store;
typedef struct Controller_ep_params Controller_ep_params;
typedef struct Controller_od  Controller_od;
typedef struct Env_store Env_store;
typedef struct Env_od  Env_od;
typedef struct EnvLedPort_store EnvLedPort_store;
typedef struct EnvLedPort_od  EnvLedPort_od;
typedef struct EnvButtonPort_store EnvButtonPort_store;
typedef struct EnvButtonPort_od  EnvButtonPort_od;
typedef struct SimulatedLight_store SimulatedLight_store;
typedef struct SimulatedLight_ep_params SimulatedLight_ep_params;
typedef struct SimulatedLight_od  SimulatedLight_od;
typedef struct SimulatedButton_store SimulatedButton_store;
typedef struct SimulatedButton_ep_params SimulatedButton_ep_params;
typedef struct SimulatedButton_od  SimulatedButton_od;
typedef struct LightProvider_store LightProvider_store;
typedef struct LightProvider_od  LightProvider_od;
typedef struct LightUser_store LightUser_store;
typedef struct LightUser_od  LightUser_od;
typedef struct ButtonProvider_store ButtonProvider_store;
typedef struct ButtonProvider_od  ButtonProvider_od;
typedef struct ButtonUser_store ButtonUser_store;
typedef struct ButtonUser_od  ButtonUser_od;
typedef struct ButtonReceiverPort_store ButtonReceiverPort_store;
typedef struct ButtonReceiverPort_od  ButtonReceiverPort_od;
typedef struct Main_store Main_store;
typedef struct Main_od  Main_od;
/**
 * Typedef of the Store type.
 */
typedef struct Store Store;

/**
 * Typedef for signal events.
 */
typedef struct SignalEvents SignalEvents;


/**
 * Typedef of read-only properties types for classes.
 */
typedef struct ButtonUser_properties_ro ButtonUser_properties_ro;
typedef struct ButtonPort_properties_ro ButtonPort_properties_ro;
typedef struct Main_properties_ro Main_properties_ro;
typedef struct Controller_properties_ro Controller_properties_ro;
typedef struct ButtonReceiverPort_properties_ro ButtonReceiverPort_properties_ro;
typedef struct LightUser_properties_ro LightUser_properties_ro;
typedef struct LightPort_properties_ro LightPort_properties_ro;
typedef struct SimulatedButton_properties_ro SimulatedButton_properties_ro;
typedef struct EnvButtonPort_properties_ro EnvButtonPort_properties_ro;
typedef struct ButtonProvider_properties_ro ButtonProvider_properties_ro;
typedef struct Env_properties_ro Env_properties_ro;
typedef struct LightProvider_properties_ro LightProvider_properties_ro;
typedef struct EnvLedPort_properties_ro EnvLedPort_properties_ro;
typedef struct System_properties_ro System_properties_ro;
typedef struct SimulatedLight_properties_ro SimulatedLight_properties_ro;
typedef struct PropertiesRO PropertiesRO;

/**
 * The number of fireable transitions of the system.
 */
#define MAX_FIREABLE_SYSTEM  (3)

/**
 * Typedef for mutability of properties.
 */
typedef struct LightPort_mutability LightPort_mutability;
typedef struct ButtonPort_mutability ButtonPort_mutability;
typedef struct System_mutability System_mutability;
typedef struct Controller_mutability Controller_mutability;
typedef struct Env_mutability Env_mutability;
typedef struct EnvLedPort_mutability EnvLedPort_mutability;
typedef struct EnvButtonPort_mutability EnvButtonPort_mutability;
typedef struct SimulatedLight_mutability SimulatedLight_mutability;
typedef struct SimulatedButton_mutability SimulatedButton_mutability;
typedef struct LightProvider_mutability LightProvider_mutability;
typedef struct LightUser_mutability LightUser_mutability;
typedef struct ButtonProvider_mutability ButtonProvider_mutability;
typedef struct ButtonUser_mutability ButtonUser_mutability;
typedef struct ButtonReceiverPort_mutability ButtonReceiverPort_mutability;
typedef struct Main_mutability Main_mutability;

/**
 * Typedef for properties types.
 */
typedef struct LightPort_PropertiesTypes LightPort_PropertiesTypes;
typedef struct ButtonPort_PropertiesTypes ButtonPort_PropertiesTypes;
typedef struct System_PropertiesTypes System_PropertiesTypes;
typedef struct Controller_PropertiesTypes Controller_PropertiesTypes;
typedef struct Env_PropertiesTypes Env_PropertiesTypes;
typedef struct EnvLedPort_PropertiesTypes EnvLedPort_PropertiesTypes;
typedef struct EnvButtonPort_PropertiesTypes EnvButtonPort_PropertiesTypes;
typedef struct SimulatedLight_PropertiesTypes SimulatedLight_PropertiesTypes;
typedef struct SimulatedButton_PropertiesTypes SimulatedButton_PropertiesTypes;
typedef struct LightProvider_PropertiesTypes LightProvider_PropertiesTypes;
typedef struct LightUser_PropertiesTypes LightUser_PropertiesTypes;
typedef struct ButtonProvider_PropertiesTypes ButtonProvider_PropertiesTypes;
typedef struct ButtonUser_PropertiesTypes ButtonUser_PropertiesTypes;
typedef struct ButtonReceiverPort_PropertiesTypes ButtonReceiverPort_PropertiesTypes;
typedef struct Main_PropertiesTypes Main_PropertiesTypes;

/**
 * Typedef for class information.
 */
typedef struct LightPort_classInfo LightPort_classInfo;
typedef struct ButtonPort_classInfo ButtonPort_classInfo;
typedef struct System_classInfo System_classInfo;
typedef struct Controller_classInfo Controller_classInfo;
typedef struct Env_classInfo Env_classInfo;
typedef struct EnvLedPort_classInfo EnvLedPort_classInfo;
typedef struct EnvButtonPort_classInfo EnvButtonPort_classInfo;
typedef struct SimulatedLight_classInfo SimulatedLight_classInfo;
typedef struct SimulatedButton_classInfo SimulatedButton_classInfo;
typedef struct LightProvider_classInfo LightProvider_classInfo;
typedef struct LightUser_classInfo LightUser_classInfo;
typedef struct ButtonProvider_classInfo ButtonProvider_classInfo;
typedef struct ButtonUser_classInfo ButtonUser_classInfo;
typedef struct ButtonReceiverPort_classInfo ButtonReceiverPort_classInfo;
typedef struct Main_classInfo Main_classInfo;

/**
 * Typedef of active objects types.
 */
SPECIFIC_TYPEDEF_Object(Controller)
SPECIFIC_TYPEDEF_Object(SimulatedLight)
SPECIFIC_TYPEDEF_Object(SimulatedButton)
typedef struct ActiveObjects ActiveObjects;

/**
 * Typedef of passive objects types.
 */
SPECIFIC_TYPEDEF_Object(LightPort)
SPECIFIC_TYPEDEF_Object(ButtonPort)
SPECIFIC_TYPEDEF_Object(System)
SPECIFIC_TYPEDEF_Object(Env)
SPECIFIC_TYPEDEF_Object(EnvLedPort)
SPECIFIC_TYPEDEF_Object(EnvButtonPort)
SPECIFIC_TYPEDEF_Object(LightProvider)
SPECIFIC_TYPEDEF_Object(LightUser)
SPECIFIC_TYPEDEF_Object(ButtonProvider)
SPECIFIC_TYPEDEF_Object(ButtonUser)
SPECIFIC_TYPEDEF_Object(ButtonReceiverPort)
SPECIFIC_TYPEDEF_Object(Main)
typedef struct PassiveObjects PassiveObjects;

/**
 * Typedef for operations type.
 */
typedef struct ButtonUser_operations ButtonUser_operations;
typedef void (*ButtonUser_method)(ButtonUser_Object * this, void * __unused_params);

typedef struct ButtonPort_operations ButtonPort_operations;
typedef void (*ButtonPort_method)(ButtonPort_Object * this, void * __unused_params);

typedef struct Main_operations Main_operations;
typedef void (*Main_method)(Main_Object * this, void * __unused_params);

typedef struct Controller_operations Controller_operations;
typedef void (*Controller_method)(Controller_Object * this, void * __unused_params);

typedef struct ButtonReceiverPort_operations ButtonReceiverPort_operations;
typedef void (*ButtonReceiverPort_method)(ButtonReceiverPort_Object * this, void * __unused_params);

typedef struct LightUser_operations LightUser_operations;
typedef void (*LightUser_method)(LightUser_Object * this, void * __unused_params);

typedef struct LightPort_operations LightPort_operations;
typedef void (*LightPort_method)(LightPort_Object * this, void * __unused_params);

typedef struct SimulatedButton_operations SimulatedButton_operations;
typedef void (*SimulatedButton_method)(SimulatedButton_Object * this, void * __unused_params);

typedef struct EnvButtonPort_operations EnvButtonPort_operations;
typedef void (*EnvButtonPort_method)(EnvButtonPort_Object * this, void * __unused_params);

typedef struct ButtonProvider_operations ButtonProvider_operations;
typedef void (*ButtonProvider_method)(ButtonProvider_Object * this, void * __unused_params);

typedef struct Env_operations Env_operations;
typedef void (*Env_method)(Env_Object * this, void * __unused_params);

typedef struct LightProvider_operations LightProvider_operations;
typedef void (*LightProvider_method)(LightProvider_Object * this, void * __unused_params);

typedef struct EnvLedPort_operations EnvLedPort_operations;
typedef void (*EnvLedPort_method)(EnvLedPort_Object * this, void * __unused_params);

typedef struct System_operations System_operations;
typedef void (*System_method)(System_Object * this, void * __unused_params);

typedef struct SimulatedLight_operations SimulatedLight_operations;
typedef void (*SimulatedLight_method)(SimulatedLight_Object * this, void * __unused_params);

/**
 * Typedef for ports.
 */
typedef struct Ports Ports;




#define NB_MODEL_PARTS	(4)
extern C_UML_Model * model_to_interpret[NB_MODEL_PARTS];

/**
 * Declarations of types for events parameters.
 */
/**
 * Type lightOn_signal_parameters corresponding to parameters of the event lightOn.
 */
struct lightOn_signal_parameters {
};
/**
 * Type lightOff_signal_parameters corresponding to parameters of the event lightOff.
 */
struct lightOff_signal_parameters {
};
/**
 * Type buttonPressed_signal_parameters corresponding to parameters of the event buttonPressed.
 */
struct buttonPressed_signal_parameters {
};
/**
 * Type buttonReleased_signal_parameters corresponding to parameters of the event buttonReleased.
 */
struct buttonReleased_signal_parameters {
};

/**
 * Declarations of types for events.
 */
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Declaration of store types.
 */
/**
 * The object data (e.g., attributes) type for the LightPort class.
 */
struct LightPort_od {
};
/**
 * The store type for the LightPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct LightPort_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonPort class.
 */
struct ButtonPort_od {
};
/**
 * The store type for the ButtonPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonPort_store {
};
/**
 * The object data (e.g., attributes) type for the System class.
 */
struct System_od {
};
/**
 * The store type for the System class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct System_store {
};
/**
 * The object data (e.g., attributes) type for the Controller class.
 */
struct Controller_od {
};
/**
 * The store type for the Controller class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Controller_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the Env class.
 */
struct Env_od {
};
/**
 * The store type for the Env class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Env_store {
};
/**
 * The object data (e.g., attributes) type for the EnvLedPort class.
 */
struct EnvLedPort_od {
};
/**
 * The store type for the EnvLedPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvLedPort_store {
};
/**
 * The object data (e.g., attributes) type for the EnvButtonPort class.
 */
struct EnvButtonPort_od {
};
/**
 * The store type for the EnvButtonPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvButtonPort_store {
};
/**
 * The object data (e.g., attributes) type for the SimulatedLight class.
 */
struct SimulatedLight_od {
};
/**
 * The store type for the SimulatedLight class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct SimulatedLight_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the SimulatedButton class.
 */
struct SimulatedButton_od {
};
/**
 * The store type for the SimulatedButton class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct SimulatedButton_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the LightProvider class.
 */
struct LightProvider_od {
};
/**
 * The store type for the LightProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct LightProvider_store {
};
/**
 * The object data (e.g., attributes) type for the LightUser class.
 */
struct LightUser_od {
};
/**
 * The store type for the LightUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct LightUser_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonProvider class.
 */
struct ButtonProvider_od {
};
/**
 * The store type for the ButtonProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonProvider_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonUser class.
 */
struct ButtonUser_od {
};
/**
 * The store type for the ButtonUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonUser_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonReceiverPort class.
 */
struct ButtonReceiverPort_od {
};
/**
 * The store type for the ButtonReceiverPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonReceiverPort_store {
};
/**
 * The object data (e.g., attributes) type for the Main class.
 */
struct Main_od {
};
/**
 * The store type for the Main class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Main_store {
};
/**
 * The Store type used to gather dynamic data of each active object.
 */
struct Store {
	#ifdef WITH_SCHEDULING_STATE
	uint32_t scheduling_state;
	#endif /* WITH_SCHEDULING_STATE */
	Main_store instMain;
	System_store instMain_system;
	LightPort_store instMain_system_sysLightPort;
	ButtonPort_store instMain_system_sysButtonPort;
	Controller_store instMain_system_controller;
	Env_store instMain_env;
	EnvLedPort_store instMain_env_envLedPort;
	EnvButtonPort_store instMain_env_envButtonPort;
	SimulatedLight_store instMain_env_envLed;
	SimulatedButton_store instMain_env_envButton;
	ButtonReceiverPort_store instMain_env_envButton_peer;
	#ifdef WITH_OBSERVERS
	#endif /* WITH_OBSERVERS */
};
extern Store store;

#ifdef ANALYSIS_WITH_DIFF
extern Store refStore;
#endif /* ANALYSIS_WITH_DIFF */

/**
 * The SignalEvents type used to gather all signal events.
 */
struct SignalEvents {
	UML_SignalEvent * lightOn;
	UML_SignalEvent * lightOff;
	UML_SignalEvent * buttonPressed;
	UML_SignalEvent * buttonReleased;
};
extern SignalEvents globalSignalEvents;


/**
 * Structures initializer for operations.
 */
struct ButtonUser_operations {
};

struct ButtonPort_operations {
};

struct Main_operations {
};

struct Controller_operations {
};

struct ButtonReceiverPort_operations {
};

struct LightUser_operations {
};

struct LightPort_operations {
};

struct SimulatedButton_operations {
};

struct EnvButtonPort_operations {
};

struct ButtonProvider_operations {
};

struct Env_operations {
};

struct LightProvider_operations {
};

struct EnvLedPort_operations {
};

struct System_operations {
};

struct SimulatedLight_operations {
};


/**
 * Macros for the mutability field of mutability structure.
 */
#define ABSTRACT_MUTABILITY_LightPort  bool envLedPort_isMutable		:1;	\
	bool controller_isMutable		:1;

#define ABSTRACT_MUTABILITY_ButtonPort  bool controller_isMutable		:1;	\
	bool envButtonPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_System  bool sysButtonPort_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool sysLightPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_Controller  bool light_isMutable		:1;	\
	bool button_isMutable		:1;

#define ABSTRACT_MUTABILITY_Env  bool envButtonPort_isMutable		:1;	\
	bool envButton_isMutable		:1;	\
	bool envLedPort_isMutable		:1;	\
	bool envLed_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvLedPort  bool led_isMutable		:1;	\
	bool systemLightPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvButtonPort  bool systemButtonPort_isMutable		:1;	\
	bool button_isMutable		:1;

#define ABSTRACT_MUTABILITY_SimulatedLight  bool ledPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_SimulatedButton  bool peer_isMutable		:1;

#define ABSTRACT_MUTABILITY_LightProvider  

#define ABSTRACT_MUTABILITY_LightUser  

#define ABSTRACT_MUTABILITY_ButtonProvider  

#define ABSTRACT_MUTABILITY_ButtonUser  

#define ABSTRACT_MUTABILITY_ButtonReceiverPort  bool buttonPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_Main  bool env_isMutable		:1;	\
	bool system_isMutable		:1;

/**
 * Mutability structures.
 */
struct LightPort_mutability {
	ABSTRACT_MUTABILITY_LightUser
	ABSTRACT_MUTABILITY_LightPort
};

struct ButtonPort_mutability {
	ABSTRACT_MUTABILITY_ButtonProvider
	ABSTRACT_MUTABILITY_ButtonPort
};

struct System_mutability {
	ABSTRACT_MUTABILITY_System
};

struct Controller_mutability {
	ABSTRACT_MUTABILITY_LightUser
	ABSTRACT_MUTABILITY_Controller
};

struct Env_mutability {
	ABSTRACT_MUTABILITY_Env
};

struct EnvLedPort_mutability {
	ABSTRACT_MUTABILITY_LightProvider
	ABSTRACT_MUTABILITY_EnvLedPort
};

struct EnvButtonPort_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
	ABSTRACT_MUTABILITY_EnvButtonPort
};

struct SimulatedLight_mutability {
	ABSTRACT_MUTABILITY_LightProvider
	ABSTRACT_MUTABILITY_SimulatedLight
};

struct SimulatedButton_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
	ABSTRACT_MUTABILITY_SimulatedButton
};

struct LightProvider_mutability {
	ABSTRACT_MUTABILITY_LightProvider
};

struct LightUser_mutability {
	ABSTRACT_MUTABILITY_LightUser
};

struct ButtonProvider_mutability {
	ABSTRACT_MUTABILITY_ButtonProvider
};

struct ButtonUser_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
};

struct ButtonReceiverPort_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
	ABSTRACT_MUTABILITY_ButtonReceiverPort
};

struct Main_mutability {
	ABSTRACT_MUTABILITY_Main
};

/**
 * Macros for the properties_types field of properties type structure.
 */
#define ABSTRACT_PROPERTIES_TYPE_LightPort  LightPort_properties_ro * envLedPort_type;	\
	LightPort_properties_ro * controller_type;

#define ABSTRACT_PROPERTIES_TYPE_ButtonPort  ButtonPort_properties_ro * controller_type;	\
	ButtonPort_properties_ro * envButtonPort_type;

#define ABSTRACT_PROPERTIES_TYPE_System  System_properties_ro * sysButtonPort_type;	\
	System_properties_ro * controller_type;	\
	System_properties_ro * sysLightPort_type;

#define ABSTRACT_PROPERTIES_TYPE_Controller  Controller_properties_ro * light_type;	\
	Controller_properties_ro * button_type;

#define ABSTRACT_PROPERTIES_TYPE_Env  Env_properties_ro * envButtonPort_type;	\
	Env_properties_ro * envButton_type;	\
	Env_properties_ro * envLedPort_type;	\
	Env_properties_ro * envLed_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvLedPort  EnvLedPort_properties_ro * led_type;	\
	EnvLedPort_properties_ro * systemLightPort_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvButtonPort  EnvButtonPort_properties_ro * systemButtonPort_type;	\
	EnvButtonPort_properties_ro * button_type;

#define ABSTRACT_PROPERTIES_TYPE_SimulatedLight  SimulatedLight_properties_ro * ledPort_type;

#define ABSTRACT_PROPERTIES_TYPE_SimulatedButton  SimulatedButton_properties_ro * peer_type;

#define ABSTRACT_PROPERTIES_TYPE_LightProvider  

#define ABSTRACT_PROPERTIES_TYPE_LightUser  

#define ABSTRACT_PROPERTIES_TYPE_ButtonProvider  

#define ABSTRACT_PROPERTIES_TYPE_ButtonUser  

#define ABSTRACT_PROPERTIES_TYPE_ButtonReceiverPort  ButtonReceiverPort_properties_ro * buttonPort_type;

#define ABSTRACT_PROPERTIES_TYPE_Main  Main_properties_ro * env_type;	\
	Main_properties_ro * system_type;

/**
 * Properties type structures.
 */
struct LightPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightUser
	ABSTRACT_PROPERTIES_TYPE_LightPort
};

struct ButtonPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonProvider
	ABSTRACT_PROPERTIES_TYPE_ButtonPort
};

struct System_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_System
};

struct Controller_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightUser
	ABSTRACT_PROPERTIES_TYPE_Controller
};

struct Env_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Env
};

struct EnvLedPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightProvider
	ABSTRACT_PROPERTIES_TYPE_EnvLedPort
};

struct EnvButtonPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
	ABSTRACT_PROPERTIES_TYPE_EnvButtonPort
};

struct SimulatedLight_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightProvider
	ABSTRACT_PROPERTIES_TYPE_SimulatedLight
};

struct SimulatedButton_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
	ABSTRACT_PROPERTIES_TYPE_SimulatedButton
};

struct LightProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightProvider
};

struct LightUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_LightUser
};

struct ButtonProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonProvider
};

struct ButtonUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
};

struct ButtonReceiverPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
	ABSTRACT_PROPERTIES_TYPE_ButtonReceiverPort
};

struct Main_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Main
};


/**
 * Class information structures.
 */
struct LightPort_classInfo {
	union {
		UML_Class * type;
		const LightPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	LightPort_mutability mutability;
};

struct ButtonPort_classInfo {
	union {
		UML_Class * type;
		const ButtonPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonPort_mutability mutability;
};

struct System_classInfo {
	union {
		UML_Class * type;
		const System_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	System_mutability mutability;
};

struct Controller_classInfo {
	union {
		UML_Class * type;
		const Controller_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Controller_mutability mutability;
};

struct Env_classInfo {
	union {
		UML_Class * type;
		const Env_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Env_mutability mutability;
};

struct EnvLedPort_classInfo {
	union {
		UML_Class * type;
		const EnvLedPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvLedPort_mutability mutability;
};

struct EnvButtonPort_classInfo {
	union {
		UML_Class * type;
		const EnvButtonPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvButtonPort_mutability mutability;
};

struct SimulatedLight_classInfo {
	union {
		UML_Class * type;
		const SimulatedLight_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	SimulatedLight_mutability mutability;
};

struct SimulatedButton_classInfo {
	union {
		UML_Class * type;
		const SimulatedButton_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	SimulatedButton_mutability mutability;
};

struct LightProvider_classInfo {
	union {
		UML_Class * type;
		const LightProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	LightProvider_mutability mutability;
};

struct LightUser_classInfo {
	union {
		UML_Class * type;
		const LightUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	LightUser_mutability mutability;
};

struct ButtonProvider_classInfo {
	union {
		UML_Class * type;
		const ButtonProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonProvider_mutability mutability;
};

struct ButtonUser_classInfo {
	union {
		UML_Class * type;
		const ButtonUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonUser_mutability mutability;
};

struct ButtonReceiverPort_classInfo {
	union {
		UML_Class * type;
		const ButtonReceiverPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonReceiverPort_mutability mutability;
};

struct Main_classInfo {
	union {
		UML_Class * type;
		const Main_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Main_mutability mutability;
};

/**
 * Specific types for active objects.
 */
SPECIFIC_STRUCT_ActiveObject(Controller)
SPECIFIC_STRUCT_ActiveObject(SimulatedLight)
SPECIFIC_STRUCT_ActiveObject(SimulatedButton)

/**
 * The ActiveObjects type used to gather all active objects
 */
struct ActiveObjects {
	Controller_Object * instMain_system_controller;
	SimulatedLight_Object * instMain_env_envLed;
	SimulatedButton_Object * instMain_env_envButton;
	#ifdef WITH_OBSERVERS
	#endif /* WITH_OBSERVERS */
};
extern ActiveObjects activeObjects;

/**
 * Specific types for passive objects.
 */
SPECIFIC_STRUCT_PassiveObject(LightPort)
SPECIFIC_STRUCT_PassiveObject(ButtonPort)
SPECIFIC_STRUCT_PassiveObject(System)
SPECIFIC_STRUCT_PassiveObject(Env)
SPECIFIC_STRUCT_PassiveObject(EnvLedPort)
SPECIFIC_STRUCT_PassiveObject(EnvButtonPort)
SPECIFIC_STRUCT_PassiveObject(LightProvider)
SPECIFIC_STRUCT_PassiveObject(LightUser)
SPECIFIC_STRUCT_PassiveObject(ButtonProvider)
SPECIFIC_STRUCT_PassiveObject(ButtonUser)
SPECIFIC_STRUCT_PassiveObject(ButtonReceiverPort)
SPECIFIC_STRUCT_PassiveObject(Main)

/**
 * The PassiveObjects type used to gather all passive objects
 */
struct PassiveObjects {
	Main_Object * instMain;
	System_Object * instMain_system;
	LightPort_Object * instMain_system_sysLightPort;
	ButtonPort_Object * instMain_system_sysButtonPort;
	Env_Object * instMain_env;
	EnvLedPort_Object * instMain_env_envLedPort;
	EnvButtonPort_Object * instMain_env_envButtonPort;
	ButtonReceiverPort_Object * instMain_env_envButton_peer;
	#ifdef WITH_OBSERVERS
	#endif /* WITH_OBSERVERS */
};
extern PassiveObjects passiveObjects;

/**
 * Declaration of read-only properties types for superclasses.
 */
#define ABSTRACT_LIGHTUSER_PROPERTIES_RO 
#define ABSTRACT_BUTTONPROVIDER_PROPERTIES_RO 
#define ABSTRACT_LIGHTPROVIDER_PROPERTIES_RO 
#define ABSTRACT_BUTTONUSER_PROPERTIES_RO 
/**
 * Declaration of read-only properties types for classes.
 */
/**
 * The ButtonUser_properties_ro type used to link instances of the ButtonUser class with their properties.
 */
struct ButtonUser_properties_ro {
};
/**
 * The ButtonPort_properties_ro type used to link instances of the ButtonPort class with their properties.
 */
struct ButtonPort_properties_ro {
	ABSTRACT_BUTTONPROVIDER_PROPERTIES_RO
	Controller_Object * controller;
	EnvButtonPort_Object * envButtonPort;
};
/**
 * The Main_properties_ro type used to link instances of the Main class with their properties.
 */
struct Main_properties_ro {
	Env_Object * env;
	System_Object * system;
};
/**
 * The Controller_properties_ro type used to link instances of the Controller class with their properties.
 */
struct Controller_properties_ro {
	ABSTRACT_LIGHTUSER_PROPERTIES_RO
	LightPort_Object * light;
	ButtonPort_Object * button;
};
/**
 * The ButtonReceiverPort_properties_ro type used to link instances of the ButtonReceiverPort class with their properties.
 */
struct ButtonReceiverPort_properties_ro {
	ABSTRACT_BUTTONUSER_PROPERTIES_RO
	EnvButtonPort_Object * buttonPort;
};
/**
 * The LightUser_properties_ro type used to link instances of the LightUser class with their properties.
 */
struct LightUser_properties_ro {
};
/**
 * The LightPort_properties_ro type used to link instances of the LightPort class with their properties.
 */
struct LightPort_properties_ro {
	ABSTRACT_LIGHTUSER_PROPERTIES_RO
	EnvLedPort_Object * envLedPort;
	Controller_Object * controller;
};
/**
 * The SimulatedButton_properties_ro type used to link instances of the SimulatedButton class with their properties.
 */
struct SimulatedButton_properties_ro {
	ABSTRACT_BUTTONUSER_PROPERTIES_RO
	ButtonReceiverPort_Object * peer;
};
/**
 * The EnvButtonPort_properties_ro type used to link instances of the EnvButtonPort class with their properties.
 */
struct EnvButtonPort_properties_ro {
	ABSTRACT_BUTTONUSER_PROPERTIES_RO
	ButtonPort_Object * systemButtonPort;
	ButtonReceiverPort_Object * button;
};
/**
 * The ButtonProvider_properties_ro type used to link instances of the ButtonProvider class with their properties.
 */
struct ButtonProvider_properties_ro {
};
/**
 * The Env_properties_ro type used to link instances of the Env class with their properties.
 */
struct Env_properties_ro {
	EnvButtonPort_Object * envButtonPort;
	SimulatedButton_Object * envButton;
	EnvLedPort_Object * envLedPort;
	SimulatedLight_Object * envLed;
};
/**
 * The LightProvider_properties_ro type used to link instances of the LightProvider class with their properties.
 */
struct LightProvider_properties_ro {
};
/**
 * The EnvLedPort_properties_ro type used to link instances of the EnvLedPort class with their properties.
 */
struct EnvLedPort_properties_ro {
	ABSTRACT_LIGHTPROVIDER_PROPERTIES_RO
	SimulatedLight_Object * led;
	LightPort_Object * systemLightPort;
};
/**
 * The System_properties_ro type used to link instances of the System class with their properties.
 */
struct System_properties_ro {
	ButtonPort_Object * sysButtonPort;
	Controller_Object * controller;
	LightPort_Object * sysLightPort;
};
/**
 * The SimulatedLight_properties_ro type used to link instances of the SimulatedLight class with their properties.
 */
struct SimulatedLight_properties_ro {
	ABSTRACT_LIGHTPROVIDER_PROPERTIES_RO
	EnvLedPort_Object * ledPort;
};
/**
 * The global read-only properties type used to make links between objects.
 */
struct PropertiesRO {
	Main_properties_ro instMain;
	System_properties_ro instMain_system;
	LightPort_properties_ro instMain_system_sysLightPort;
	ButtonPort_properties_ro instMain_system_sysButtonPort;
	Controller_properties_ro instMain_system_controller;
	Env_properties_ro instMain_env;
	EnvLedPort_properties_ro instMain_env_envLedPort;
	EnvButtonPort_properties_ro instMain_env_envButtonPort;
	SimulatedLight_properties_ro instMain_env_envLed;
	SimulatedButton_properties_ro instMain_env_envButton;
	ButtonReceiverPort_properties_ro instMain_env_envButton_peer;
	#ifdef WITH_OBSERVERS
	#endif /* WITH_OBSERVERS */
};
extern PropertiesRO properties_ro;

/**
 * The Ports type used to gather all ports.
 */
struct Ports {
	UML_Port * ButtonLedsSystem__POINT__System__POINT__sysLightPort;
	UML_Port * ButtonLedsSystem__POINT__System__POINT__sysButtonPort;
	UML_Port * ButtonLedsEnvironment__POINT__Env__POINT__envLedPort;
	UML_Port * ButtonLedsEnvironment__POINT__Env__POINT__envButtonPort;
	UML_Port * ButtonLedsEnvironment__POINT__SimulatedButton__POINT__peer;
};
#ifdef EVENT_PORT_TAGGING
	extern Ports globalPorts;
#endif


#endif /* MODEL_H */
