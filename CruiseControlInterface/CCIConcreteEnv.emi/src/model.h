#ifndef MODEL_H
#define MODEL_H
/**
 * @file model.h
 *
 * Define the UML model to interpret.
 *
 * This file is automatically generated by the uml-serializer-c tool.
 * Do not modify manually.
 *
 * @author Matthias Brun (matthias.brun@eseo.fr)
 * @author Valentin Besnard (valentin.besnard@eseo.fr)
 */

#include "types_calibration.h"
//#include "interpreter/interpreter.h"
#include "interpreter/active_object.h"
#include "interpreter/passive_object.h"

/**
 * Number of observers in the model (observers that are active objects).
 */
#define NB_OBSERVERS (3)

/**
 * Typedef for events parameters.
 */
typedef struct buttonPressed_signal_parameters buttonPressed_signal_parameters;
typedef struct lock_signal_parameters lock_signal_parameters;
typedef struct unlock_signal_parameters unlock_signal_parameters;
typedef struct requestPedals_signal_parameters requestPedals_signal_parameters;
typedef struct ackPedals_signal_parameters ackPedals_signal_parameters;
typedef struct nackPedals_signal_parameters nackPedals_signal_parameters;
typedef struct setCS_signal_parameters setCS_signal_parameters;
typedef struct incCS_signal_parameters incCS_signal_parameters;
typedef struct decCS_signal_parameters decCS_signal_parameters;
typedef struct ackCS_signal_parameters ackCS_signal_parameters;
typedef struct nackCS_signal_parameters nackCS_signal_parameters;
typedef struct resetCS_signal_parameters resetCS_signal_parameters;
typedef struct engage_signal_parameters engage_signal_parameters;
typedef struct disengage_signal_parameters disengage_signal_parameters;
typedef struct disengaged_signal_parameters disengaged_signal_parameters;
typedef struct speedCaptured_signal_parameters speedCaptured_signal_parameters;
typedef struct speedNotCaptured_signal_parameters speedNotCaptured_signal_parameters;
typedef struct requestSetPoint_signal_parameters requestSetPoint_signal_parameters;
typedef struct start_signal_parameters start_signal_parameters;
typedef struct stop_signal_parameters stop_signal_parameters;
typedef struct set_signal_parameters set_signal_parameters;
typedef struct pause_signal_parameters pause_signal_parameters;
typedef struct resume_signal_parameters resume_signal_parameters;
typedef struct inc_signal_parameters inc_signal_parameters;
typedef struct dec_signal_parameters dec_signal_parameters;
typedef struct pedalPressed_signal_parameters pedalPressed_signal_parameters;
typedef struct pedalReleased_signal_parameters pedalReleased_signal_parameters;
typedef struct controlOn_signal_parameters controlOn_signal_parameters;
typedef struct controlOff_signal_parameters controlOff_signal_parameters;
typedef struct updateSpeed_signal_parameters updateSpeed_signal_parameters;
typedef struct updateSetPoint_signal_parameters updateSetPoint_signal_parameters;

/**
 * Typedef for events.
 */
typedef struct Actuation_events Actuation_events;
typedef struct CruiseSpeedManager_events CruiseSpeedManager_events;
typedef struct Engine_events Engine_events;
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Typedef of store types.
 */
typedef struct EnvButtonsPort_store EnvButtonsPort_store;
typedef struct EnvButtonsPort_od  EnvButtonsPort_od;
typedef struct EnvPedalPort_store EnvPedalPort_store;
typedef struct EnvPedalPort_od  EnvPedalPort_od;
typedef struct EnvControlOnOffPort_store EnvControlOnOffPort_store;
typedef struct EnvControlOnOffPort_od  EnvControlOnOffPort_od;
typedef struct EnvSpeedPort_store EnvSpeedPort_store;
typedef struct EnvSpeedPort_od  EnvSpeedPort_od;
typedef struct EnvCruiseSpeedPort_store EnvCruiseSpeedPort_store;
typedef struct EnvCruiseSpeedPort_od  EnvCruiseSpeedPort_od;
typedef struct Env_store Env_store;
typedef struct Env_od  Env_od;
typedef struct ButtonsPort_store ButtonsPort_store;
typedef struct ButtonsPort_od  ButtonsPort_od;
typedef struct Buttons_store Buttons_store;
typedef struct Buttons_ep_params Buttons_ep_params;
typedef struct Buttons_od  Buttons_od;
typedef struct PedalPort_store PedalPort_store;
typedef struct PedalPort_od  PedalPort_od;
typedef struct Pedal_store Pedal_store;
typedef struct Pedal_ep_params Pedal_ep_params;
typedef struct Pedal_od  Pedal_od;
typedef struct Engine_store Engine_store;
typedef struct Engine_ep_params Engine_ep_params;
typedef struct Engine_od  Engine_od;
typedef struct Main_store Main_store;
typedef struct Main_od  Main_od;
typedef struct ButtonProvider_store ButtonProvider_store;
typedef struct ButtonProvider_od  ButtonProvider_od;
typedef struct ButtonUser_store ButtonUser_store;
typedef struct ButtonUser_od  ButtonUser_od;
typedef struct ButtonPort_store ButtonPort_store;
typedef struct ButtonPort_od  ButtonPort_od;
typedef struct GpioButton_store GpioButton_store;
typedef struct GpioButton_ep_params GpioButton_ep_params;
typedef struct GpioButton_od  GpioButton_od;
typedef struct Obs_store Obs_store;
typedef struct Obs_od  Obs_od;
typedef struct Observer1_store Observer1_store;
typedef struct Observer1_ep_params Observer1_ep_params;
typedef struct Observer1_od  Observer1_od;
typedef struct Observer2_store Observer2_store;
typedef struct Observer2_ep_params Observer2_ep_params;
typedef struct Observer2_od  Observer2_od;
typedef struct Observer3_store Observer3_store;
typedef struct Observer3_ep_params Observer3_ep_params;
typedef struct Observer3_od  Observer3_od;
typedef struct CCIButtonsPort_store CCIButtonsPort_store;
typedef struct CCIButtonsPort_od  CCIButtonsPort_od;
typedef struct CCIPedalPort_store CCIPedalPort_store;
typedef struct CCIPedalPort_od  CCIPedalPort_od;
typedef struct CCIControlOnOffPort_store CCIControlOnOffPort_store;
typedef struct CCIControlOnOffPort_od  CCIControlOnOffPort_od;
typedef struct CCISpeedPort_store CCISpeedPort_store;
typedef struct CCISpeedPort_od  CCISpeedPort_od;
typedef struct CCICruiseSpeedPort_store CCICruiseSpeedPort_store;
typedef struct CCICruiseSpeedPort_od  CCICruiseSpeedPort_od;
typedef struct PedalsManagerPedalPort_store PedalsManagerPedalPort_store;
typedef struct PedalsManagerPedalPort_od  PedalsManagerPedalPort_od;
typedef struct CCI_store CCI_store;
typedef struct CCI_od  CCI_od;
typedef struct Actuation_store Actuation_store;
typedef struct Actuation_ep_params Actuation_ep_params;
typedef struct Actuation_od  Actuation_od;
typedef struct CruiseSpeedManager_store CruiseSpeedManager_store;
typedef struct CruiseSpeedManager_ep_params CruiseSpeedManager_ep_params;
typedef struct CruiseSpeedManager_od  CruiseSpeedManager_od;
typedef struct PedalsManager_store PedalsManager_store;
typedef struct PedalsManager_ep_params PedalsManager_ep_params;
typedef struct PedalsManager_od  PedalsManager_od;
typedef struct Controller_store Controller_store;
typedef struct Controller_ep_params Controller_ep_params;
typedef struct Controller_od  Controller_od;
typedef struct ButtonsProvider_store ButtonsProvider_store;
typedef struct ButtonsProvider_od  ButtonsProvider_od;
typedef struct ButtonsUser_store ButtonsUser_store;
typedef struct ButtonsUser_od  ButtonsUser_od;
typedef struct PedalProvider_store PedalProvider_store;
typedef struct PedalProvider_od  PedalProvider_od;
typedef struct PedalUser_store PedalUser_store;
typedef struct PedalUser_od  PedalUser_od;
typedef struct ControlOnOffProvider_store ControlOnOffProvider_store;
typedef struct ControlOnOffProvider_od  ControlOnOffProvider_od;
typedef struct ControlOnOffUser_store ControlOnOffUser_store;
typedef struct ControlOnOffUser_od  ControlOnOffUser_od;
typedef struct SpeedProvider_store SpeedProvider_store;
typedef struct SpeedProvider_od  SpeedProvider_od;
typedef struct SpeedUser_store SpeedUser_store;
typedef struct SpeedUser_od  SpeedUser_od;
typedef struct CruiseSpeedProvider_store CruiseSpeedProvider_store;
typedef struct CruiseSpeedProvider_od  CruiseSpeedProvider_od;
typedef struct CruiseSpeedUser_store CruiseSpeedUser_store;
typedef struct CruiseSpeedUser_od  CruiseSpeedUser_od;
/**
 * Typedef of the Store type.
 */
typedef struct Store Store;

/**
 * Typedef for signal events.
 */
typedef struct SignalEvents SignalEvents;


/**
 * Typedef of read-only properties types for classes.
 */
typedef struct PedalPort_properties_ro PedalPort_properties_ro;
typedef struct PedalsManagerPedalPort_properties_ro PedalsManagerPedalPort_properties_ro;
typedef struct CCI_properties_ro CCI_properties_ro;
typedef struct CruiseSpeedProvider_properties_ro CruiseSpeedProvider_properties_ro;
typedef struct ButtonProvider_properties_ro ButtonProvider_properties_ro;
typedef struct Observer1_properties_ro Observer1_properties_ro;
typedef struct Main_properties_ro Main_properties_ro;
typedef struct ControlOnOffProvider_properties_ro ControlOnOffProvider_properties_ro;
typedef struct Pedal_properties_ro Pedal_properties_ro;
typedef struct CCIControlOnOffPort_properties_ro CCIControlOnOffPort_properties_ro;
typedef struct ButtonUser_properties_ro ButtonUser_properties_ro;
typedef struct CCIButtonsPort_properties_ro CCIButtonsPort_properties_ro;
typedef struct Controller_properties_ro Controller_properties_ro;
typedef struct Actuation_properties_ro Actuation_properties_ro;
typedef struct Engine_properties_ro Engine_properties_ro;
typedef struct Env_properties_ro Env_properties_ro;
typedef struct ButtonsProvider_properties_ro ButtonsProvider_properties_ro;
typedef struct PedalProvider_properties_ro PedalProvider_properties_ro;
typedef struct SpeedUser_properties_ro SpeedUser_properties_ro;
typedef struct ControlOnOffUser_properties_ro ControlOnOffUser_properties_ro;
typedef struct Buttons_properties_ro Buttons_properties_ro;
typedef struct PedalsManager_properties_ro PedalsManager_properties_ro;
typedef struct CruiseSpeedUser_properties_ro CruiseSpeedUser_properties_ro;
typedef struct PedalUser_properties_ro PedalUser_properties_ro;
typedef struct ButtonsUser_properties_ro ButtonsUser_properties_ro;
typedef struct EnvButtonsPort_properties_ro EnvButtonsPort_properties_ro;
typedef struct EnvPedalPort_properties_ro EnvPedalPort_properties_ro;
typedef struct EnvControlOnOffPort_properties_ro EnvControlOnOffPort_properties_ro;
typedef struct ButtonPort_properties_ro ButtonPort_properties_ro;
typedef struct CruiseSpeedManager_properties_ro CruiseSpeedManager_properties_ro;
typedef struct SpeedProvider_properties_ro SpeedProvider_properties_ro;
typedef struct EnvSpeedPort_properties_ro EnvSpeedPort_properties_ro;
typedef struct Obs_properties_ro Obs_properties_ro;
typedef struct CCICruiseSpeedPort_properties_ro CCICruiseSpeedPort_properties_ro;
typedef struct EnvCruiseSpeedPort_properties_ro EnvCruiseSpeedPort_properties_ro;
typedef struct GpioButton_properties_ro GpioButton_properties_ro;
typedef struct ButtonsPort_properties_ro ButtonsPort_properties_ro;
typedef struct Observer3_properties_ro Observer3_properties_ro;
typedef struct CCIPedalPort_properties_ro CCIPedalPort_properties_ro;
typedef struct Observer2_properties_ro Observer2_properties_ro;
typedef struct CCISpeedPort_properties_ro CCISpeedPort_properties_ro;
typedef struct PropertiesRO PropertiesRO;

/**
 * The number of fireable transitions of the system.
 */
#define MAX_FIREABLE_SYSTEM  (49)

/**
 * Typedef for mutability of properties.
 */
typedef struct EnvButtonsPort_mutability EnvButtonsPort_mutability;
typedef struct EnvPedalPort_mutability EnvPedalPort_mutability;
typedef struct EnvControlOnOffPort_mutability EnvControlOnOffPort_mutability;
typedef struct EnvSpeedPort_mutability EnvSpeedPort_mutability;
typedef struct EnvCruiseSpeedPort_mutability EnvCruiseSpeedPort_mutability;
typedef struct Env_mutability Env_mutability;
typedef struct ButtonsPort_mutability ButtonsPort_mutability;
typedef struct Buttons_mutability Buttons_mutability;
typedef struct PedalPort_mutability PedalPort_mutability;
typedef struct Pedal_mutability Pedal_mutability;
typedef struct Engine_mutability Engine_mutability;
typedef struct Main_mutability Main_mutability;
typedef struct ButtonProvider_mutability ButtonProvider_mutability;
typedef struct ButtonUser_mutability ButtonUser_mutability;
typedef struct ButtonPort_mutability ButtonPort_mutability;
typedef struct GpioButton_mutability GpioButton_mutability;
typedef struct Obs_mutability Obs_mutability;
typedef struct Observer1_mutability Observer1_mutability;
typedef struct Observer2_mutability Observer2_mutability;
typedef struct Observer3_mutability Observer3_mutability;
typedef struct CCIButtonsPort_mutability CCIButtonsPort_mutability;
typedef struct CCIPedalPort_mutability CCIPedalPort_mutability;
typedef struct CCIControlOnOffPort_mutability CCIControlOnOffPort_mutability;
typedef struct CCISpeedPort_mutability CCISpeedPort_mutability;
typedef struct CCICruiseSpeedPort_mutability CCICruiseSpeedPort_mutability;
typedef struct PedalsManagerPedalPort_mutability PedalsManagerPedalPort_mutability;
typedef struct CCI_mutability CCI_mutability;
typedef struct Actuation_mutability Actuation_mutability;
typedef struct CruiseSpeedManager_mutability CruiseSpeedManager_mutability;
typedef struct PedalsManager_mutability PedalsManager_mutability;
typedef struct Controller_mutability Controller_mutability;
typedef struct ButtonsProvider_mutability ButtonsProvider_mutability;
typedef struct ButtonsUser_mutability ButtonsUser_mutability;
typedef struct PedalProvider_mutability PedalProvider_mutability;
typedef struct PedalUser_mutability PedalUser_mutability;
typedef struct ControlOnOffProvider_mutability ControlOnOffProvider_mutability;
typedef struct ControlOnOffUser_mutability ControlOnOffUser_mutability;
typedef struct SpeedProvider_mutability SpeedProvider_mutability;
typedef struct SpeedUser_mutability SpeedUser_mutability;
typedef struct CruiseSpeedProvider_mutability CruiseSpeedProvider_mutability;
typedef struct CruiseSpeedUser_mutability CruiseSpeedUser_mutability;

/**
 * Typedef for properties types.
 */
typedef struct EnvButtonsPort_PropertiesTypes EnvButtonsPort_PropertiesTypes;
typedef struct EnvPedalPort_PropertiesTypes EnvPedalPort_PropertiesTypes;
typedef struct EnvControlOnOffPort_PropertiesTypes EnvControlOnOffPort_PropertiesTypes;
typedef struct EnvSpeedPort_PropertiesTypes EnvSpeedPort_PropertiesTypes;
typedef struct EnvCruiseSpeedPort_PropertiesTypes EnvCruiseSpeedPort_PropertiesTypes;
typedef struct Env_PropertiesTypes Env_PropertiesTypes;
typedef struct ButtonsPort_PropertiesTypes ButtonsPort_PropertiesTypes;
typedef struct Buttons_PropertiesTypes Buttons_PropertiesTypes;
typedef struct PedalPort_PropertiesTypes PedalPort_PropertiesTypes;
typedef struct Pedal_PropertiesTypes Pedal_PropertiesTypes;
typedef struct Engine_PropertiesTypes Engine_PropertiesTypes;
typedef struct Main_PropertiesTypes Main_PropertiesTypes;
typedef struct ButtonProvider_PropertiesTypes ButtonProvider_PropertiesTypes;
typedef struct ButtonUser_PropertiesTypes ButtonUser_PropertiesTypes;
typedef struct ButtonPort_PropertiesTypes ButtonPort_PropertiesTypes;
typedef struct GpioButton_PropertiesTypes GpioButton_PropertiesTypes;
typedef struct Obs_PropertiesTypes Obs_PropertiesTypes;
typedef struct Observer1_PropertiesTypes Observer1_PropertiesTypes;
typedef struct Observer2_PropertiesTypes Observer2_PropertiesTypes;
typedef struct Observer3_PropertiesTypes Observer3_PropertiesTypes;
typedef struct CCIButtonsPort_PropertiesTypes CCIButtonsPort_PropertiesTypes;
typedef struct CCIPedalPort_PropertiesTypes CCIPedalPort_PropertiesTypes;
typedef struct CCIControlOnOffPort_PropertiesTypes CCIControlOnOffPort_PropertiesTypes;
typedef struct CCISpeedPort_PropertiesTypes CCISpeedPort_PropertiesTypes;
typedef struct CCICruiseSpeedPort_PropertiesTypes CCICruiseSpeedPort_PropertiesTypes;
typedef struct PedalsManagerPedalPort_PropertiesTypes PedalsManagerPedalPort_PropertiesTypes;
typedef struct CCI_PropertiesTypes CCI_PropertiesTypes;
typedef struct Actuation_PropertiesTypes Actuation_PropertiesTypes;
typedef struct CruiseSpeedManager_PropertiesTypes CruiseSpeedManager_PropertiesTypes;
typedef struct PedalsManager_PropertiesTypes PedalsManager_PropertiesTypes;
typedef struct Controller_PropertiesTypes Controller_PropertiesTypes;
typedef struct ButtonsProvider_PropertiesTypes ButtonsProvider_PropertiesTypes;
typedef struct ButtonsUser_PropertiesTypes ButtonsUser_PropertiesTypes;
typedef struct PedalProvider_PropertiesTypes PedalProvider_PropertiesTypes;
typedef struct PedalUser_PropertiesTypes PedalUser_PropertiesTypes;
typedef struct ControlOnOffProvider_PropertiesTypes ControlOnOffProvider_PropertiesTypes;
typedef struct ControlOnOffUser_PropertiesTypes ControlOnOffUser_PropertiesTypes;
typedef struct SpeedProvider_PropertiesTypes SpeedProvider_PropertiesTypes;
typedef struct SpeedUser_PropertiesTypes SpeedUser_PropertiesTypes;
typedef struct CruiseSpeedProvider_PropertiesTypes CruiseSpeedProvider_PropertiesTypes;
typedef struct CruiseSpeedUser_PropertiesTypes CruiseSpeedUser_PropertiesTypes;

/**
 * Typedef for class information.
 */
typedef struct EnvButtonsPort_classInfo EnvButtonsPort_classInfo;
typedef struct EnvPedalPort_classInfo EnvPedalPort_classInfo;
typedef struct EnvControlOnOffPort_classInfo EnvControlOnOffPort_classInfo;
typedef struct EnvSpeedPort_classInfo EnvSpeedPort_classInfo;
typedef struct EnvCruiseSpeedPort_classInfo EnvCruiseSpeedPort_classInfo;
typedef struct Env_classInfo Env_classInfo;
typedef struct ButtonsPort_classInfo ButtonsPort_classInfo;
typedef struct Buttons_classInfo Buttons_classInfo;
typedef struct PedalPort_classInfo PedalPort_classInfo;
typedef struct Pedal_classInfo Pedal_classInfo;
typedef struct Engine_classInfo Engine_classInfo;
typedef struct Main_classInfo Main_classInfo;
typedef struct ButtonProvider_classInfo ButtonProvider_classInfo;
typedef struct ButtonUser_classInfo ButtonUser_classInfo;
typedef struct ButtonPort_classInfo ButtonPort_classInfo;
typedef struct GpioButton_classInfo GpioButton_classInfo;
typedef struct Obs_classInfo Obs_classInfo;
typedef struct Observer1_classInfo Observer1_classInfo;
typedef struct Observer2_classInfo Observer2_classInfo;
typedef struct Observer3_classInfo Observer3_classInfo;
typedef struct CCIButtonsPort_classInfo CCIButtonsPort_classInfo;
typedef struct CCIPedalPort_classInfo CCIPedalPort_classInfo;
typedef struct CCIControlOnOffPort_classInfo CCIControlOnOffPort_classInfo;
typedef struct CCISpeedPort_classInfo CCISpeedPort_classInfo;
typedef struct CCICruiseSpeedPort_classInfo CCICruiseSpeedPort_classInfo;
typedef struct PedalsManagerPedalPort_classInfo PedalsManagerPedalPort_classInfo;
typedef struct CCI_classInfo CCI_classInfo;
typedef struct Actuation_classInfo Actuation_classInfo;
typedef struct CruiseSpeedManager_classInfo CruiseSpeedManager_classInfo;
typedef struct PedalsManager_classInfo PedalsManager_classInfo;
typedef struct Controller_classInfo Controller_classInfo;
typedef struct ButtonsProvider_classInfo ButtonsProvider_classInfo;
typedef struct ButtonsUser_classInfo ButtonsUser_classInfo;
typedef struct PedalProvider_classInfo PedalProvider_classInfo;
typedef struct PedalUser_classInfo PedalUser_classInfo;
typedef struct ControlOnOffProvider_classInfo ControlOnOffProvider_classInfo;
typedef struct ControlOnOffUser_classInfo ControlOnOffUser_classInfo;
typedef struct SpeedProvider_classInfo SpeedProvider_classInfo;
typedef struct SpeedUser_classInfo SpeedUser_classInfo;
typedef struct CruiseSpeedProvider_classInfo CruiseSpeedProvider_classInfo;
typedef struct CruiseSpeedUser_classInfo CruiseSpeedUser_classInfo;

/**
 * Typedef of active objects types.
 */
SPECIFIC_TYPEDEF_Object(Buttons)
SPECIFIC_TYPEDEF_Object(Pedal)
SPECIFIC_TYPEDEF_Object(Engine)
SPECIFIC_TYPEDEF_Object(GpioButton)
SPECIFIC_TYPEDEF_Object(Observer1)
SPECIFIC_TYPEDEF_Object(Observer2)
SPECIFIC_TYPEDEF_Object(Observer3)
SPECIFIC_TYPEDEF_Object(Actuation)
SPECIFIC_TYPEDEF_Object(CruiseSpeedManager)
SPECIFIC_TYPEDEF_Object(PedalsManager)
SPECIFIC_TYPEDEF_Object(Controller)
typedef struct ActiveObjects ActiveObjects;

/**
 * Typedef of passive objects types.
 */
SPECIFIC_TYPEDEF_Object(EnvButtonsPort)
SPECIFIC_TYPEDEF_Object(EnvPedalPort)
SPECIFIC_TYPEDEF_Object(EnvControlOnOffPort)
SPECIFIC_TYPEDEF_Object(EnvSpeedPort)
SPECIFIC_TYPEDEF_Object(EnvCruiseSpeedPort)
SPECIFIC_TYPEDEF_Object(Env)
SPECIFIC_TYPEDEF_Object(ButtonsPort)
SPECIFIC_TYPEDEF_Object(PedalPort)
SPECIFIC_TYPEDEF_Object(Main)
SPECIFIC_TYPEDEF_Object(ButtonProvider)
SPECIFIC_TYPEDEF_Object(ButtonUser)
SPECIFIC_TYPEDEF_Object(ButtonPort)
SPECIFIC_TYPEDEF_Object(Obs)
SPECIFIC_TYPEDEF_Object(CCIButtonsPort)
SPECIFIC_TYPEDEF_Object(CCIPedalPort)
SPECIFIC_TYPEDEF_Object(CCIControlOnOffPort)
SPECIFIC_TYPEDEF_Object(CCISpeedPort)
SPECIFIC_TYPEDEF_Object(CCICruiseSpeedPort)
SPECIFIC_TYPEDEF_Object(PedalsManagerPedalPort)
SPECIFIC_TYPEDEF_Object(CCI)
SPECIFIC_TYPEDEF_Object(ButtonsProvider)
SPECIFIC_TYPEDEF_Object(ButtonsUser)
SPECIFIC_TYPEDEF_Object(PedalProvider)
SPECIFIC_TYPEDEF_Object(PedalUser)
SPECIFIC_TYPEDEF_Object(ControlOnOffProvider)
SPECIFIC_TYPEDEF_Object(ControlOnOffUser)
SPECIFIC_TYPEDEF_Object(SpeedProvider)
SPECIFIC_TYPEDEF_Object(SpeedUser)
SPECIFIC_TYPEDEF_Object(CruiseSpeedProvider)
SPECIFIC_TYPEDEF_Object(CruiseSpeedUser)
typedef struct PassiveObjects PassiveObjects;

/**
 * Typedef for operations type.
 */
typedef struct PedalPort_operations PedalPort_operations;
typedef void (*PedalPort_method)(PedalPort_Object * this, void * __unused_params);

typedef struct PedalsManagerPedalPort_operations PedalsManagerPedalPort_operations;
typedef void (*PedalsManagerPedalPort_method)(PedalsManagerPedalPort_Object * this, void * __unused_params);

typedef struct CCI_operations CCI_operations;
typedef void (*CCI_method)(CCI_Object * this, void * __unused_params);

typedef struct CruiseSpeedProvider_operations CruiseSpeedProvider_operations;
typedef void (*CruiseSpeedProvider_method)(CruiseSpeedProvider_Object * this, void * __unused_params);

typedef struct ButtonProvider_operations ButtonProvider_operations;
typedef void (*ButtonProvider_method)(ButtonProvider_Object * this, void * __unused_params);

typedef struct Observer1_operations Observer1_operations;
typedef void (*Observer1_method)(Observer1_Object * this, void * __unused_params);

typedef struct Main_operations Main_operations;
typedef void (*Main_method)(Main_Object * this, void * __unused_params);

typedef struct ControlOnOffProvider_operations ControlOnOffProvider_operations;
typedef void (*ControlOnOffProvider_method)(ControlOnOffProvider_Object * this, void * __unused_params);

typedef struct Pedal_operations Pedal_operations;
typedef void (*Pedal_method)(Pedal_Object * this, void * __unused_params);

typedef struct CCIControlOnOffPort_operations CCIControlOnOffPort_operations;
typedef void (*CCIControlOnOffPort_method)(CCIControlOnOffPort_Object * this, void * __unused_params);

typedef struct ButtonUser_operations ButtonUser_operations;
typedef void (*ButtonUser_method)(ButtonUser_Object * this, void * __unused_params);

typedef struct CCIButtonsPort_operations CCIButtonsPort_operations;
typedef void (*CCIButtonsPort_method)(CCIButtonsPort_Object * this, void * __unused_params);

typedef struct Controller_operations Controller_operations;
typedef void (*Controller_method)(Controller_Object * this, void * __unused_params);

typedef struct Actuation_operations Actuation_operations;
typedef void (*Actuation_method)(Actuation_Object * this, void * __unused_params);

typedef struct Engine_operations Engine_operations;
typedef void (*Engine_method)(Engine_Object * this, void * __unused_params);

typedef struct Env_operations Env_operations;
typedef void (*Env_method)(Env_Object * this, void * __unused_params);

typedef struct ButtonsProvider_operations ButtonsProvider_operations;
typedef void (*ButtonsProvider_method)(ButtonsProvider_Object * this, void * __unused_params);

typedef struct PedalProvider_operations PedalProvider_operations;
typedef void (*PedalProvider_method)(PedalProvider_Object * this, void * __unused_params);

typedef struct SpeedUser_operations SpeedUser_operations;
typedef void (*SpeedUser_method)(SpeedUser_Object * this, void * __unused_params);

typedef struct ControlOnOffUser_operations ControlOnOffUser_operations;
typedef void (*ControlOnOffUser_method)(ControlOnOffUser_Object * this, void * __unused_params);

typedef struct Buttons_operations Buttons_operations;
typedef void (*Buttons_method)(Buttons_Object * this, void * __unused_params);

typedef struct PedalsManager_operations PedalsManager_operations;
typedef void (*PedalsManager_method)(PedalsManager_Object * this, void * __unused_params);

typedef struct CruiseSpeedUser_operations CruiseSpeedUser_operations;
typedef void (*CruiseSpeedUser_method)(CruiseSpeedUser_Object * this, void * __unused_params);

typedef struct PedalUser_operations PedalUser_operations;
typedef void (*PedalUser_method)(PedalUser_Object * this, void * __unused_params);

typedef struct EnvButtonsPort_operations EnvButtonsPort_operations;
typedef void (*EnvButtonsPort_method)(EnvButtonsPort_Object * this, void * __unused_params);

typedef struct ButtonsUser_operations ButtonsUser_operations;
typedef void (*ButtonsUser_method)(ButtonsUser_Object * this, void * __unused_params);

typedef struct EnvPedalPort_operations EnvPedalPort_operations;
typedef void (*EnvPedalPort_method)(EnvPedalPort_Object * this, void * __unused_params);

typedef struct EnvControlOnOffPort_operations EnvControlOnOffPort_operations;
typedef void (*EnvControlOnOffPort_method)(EnvControlOnOffPort_Object * this, void * __unused_params);

typedef struct ButtonPort_operations ButtonPort_operations;
typedef void (*ButtonPort_method)(ButtonPort_Object * this, void * __unused_params);

typedef struct CruiseSpeedManager_operations CruiseSpeedManager_operations;
typedef void (*CruiseSpeedManager_method)(CruiseSpeedManager_Object * this, void * __unused_params);

typedef struct EnvSpeedPort_operations EnvSpeedPort_operations;
typedef void (*EnvSpeedPort_method)(EnvSpeedPort_Object * this, void * __unused_params);

typedef struct Obs_operations Obs_operations;
typedef void (*Obs_method)(Obs_Object * this, void * __unused_params);

typedef struct CCICruiseSpeedPort_operations CCICruiseSpeedPort_operations;
typedef void (*CCICruiseSpeedPort_method)(CCICruiseSpeedPort_Object * this, void * __unused_params);

typedef struct SpeedProvider_operations SpeedProvider_operations;
typedef void (*SpeedProvider_method)(SpeedProvider_Object * this, void * __unused_params);

typedef struct EnvCruiseSpeedPort_operations EnvCruiseSpeedPort_operations;
typedef void (*EnvCruiseSpeedPort_method)(EnvCruiseSpeedPort_Object * this, void * __unused_params);

typedef struct GpioButton_operations GpioButton_operations;
typedef void (*GpioButton_method)(GpioButton_Object * this, void * __unused_params);

typedef struct ButtonsPort_operations ButtonsPort_operations;
typedef void (*ButtonsPort_method)(ButtonsPort_Object * this, void * __unused_params);

typedef struct Observer3_operations Observer3_operations;
typedef void (*Observer3_method)(Observer3_Object * this, void * __unused_params);

typedef struct CCIPedalPort_operations CCIPedalPort_operations;
typedef void (*CCIPedalPort_method)(CCIPedalPort_Object * this, void * __unused_params);

typedef struct Observer2_operations Observer2_operations;
typedef void (*Observer2_method)(Observer2_Object * this, void * __unused_params);

typedef struct CCISpeedPort_operations CCISpeedPort_operations;
typedef void (*CCISpeedPort_method)(CCISpeedPort_Object * this, void * __unused_params);

/**
 * Typedef for ports.
 */
typedef struct Ports Ports;




#define NB_MODEL_PARTS	(6)
extern C_UML_Model * model_to_interpret[NB_MODEL_PARTS];

/**
 * Declarations of types for events parameters.
 */
/**
 * Type buttonPressed_signal_parameters corresponding to parameters of the event buttonPressed.
 */
struct buttonPressed_signal_parameters {
};
/**
 * Type lock_signal_parameters corresponding to parameters of the event lock.
 */
struct lock_signal_parameters {
};
/**
 * Type unlock_signal_parameters corresponding to parameters of the event unlock.
 */
struct unlock_signal_parameters {
};
/**
 * Type requestPedals_signal_parameters corresponding to parameters of the event requestPedals.
 */
struct requestPedals_signal_parameters {
};
/**
 * Type ackPedals_signal_parameters corresponding to parameters of the event ackPedals.
 */
struct ackPedals_signal_parameters {
};
/**
 * Type nackPedals_signal_parameters corresponding to parameters of the event nackPedals.
 */
struct nackPedals_signal_parameters {
};
/**
 * Type setCS_signal_parameters corresponding to parameters of the event setCS.
 */
struct setCS_signal_parameters {
};
/**
 * Type incCS_signal_parameters corresponding to parameters of the event incCS.
 */
struct incCS_signal_parameters {
};
/**
 * Type decCS_signal_parameters corresponding to parameters of the event decCS.
 */
struct decCS_signal_parameters {
};
/**
 * Type ackCS_signal_parameters corresponding to parameters of the event ackCS.
 */
struct ackCS_signal_parameters {
};
/**
 * Type nackCS_signal_parameters corresponding to parameters of the event nackCS.
 */
struct nackCS_signal_parameters {
};
/**
 * Type resetCS_signal_parameters corresponding to parameters of the event resetCS.
 */
struct resetCS_signal_parameters {
};
/**
 * Type engage_signal_parameters corresponding to parameters of the event engage.
 */
struct engage_signal_parameters {
};
/**
 * Type disengage_signal_parameters corresponding to parameters of the event disengage.
 */
struct disengage_signal_parameters {
};
/**
 * Type disengaged_signal_parameters corresponding to parameters of the event disengaged.
 */
struct disengaged_signal_parameters {
};
/**
 * Type speedCaptured_signal_parameters corresponding to parameters of the event speedCaptured.
 */
struct speedCaptured_signal_parameters {
	int32_t speed;
};
/**
 * Type speedNotCaptured_signal_parameters corresponding to parameters of the event speedNotCaptured.
 */
struct speedNotCaptured_signal_parameters {
};
/**
 * Type requestSetPoint_signal_parameters corresponding to parameters of the event requestSetPoint.
 */
struct requestSetPoint_signal_parameters {
};
/**
 * Type start_signal_parameters corresponding to parameters of the event start.
 */
struct start_signal_parameters {
};
/**
 * Type stop_signal_parameters corresponding to parameters of the event stop.
 */
struct stop_signal_parameters {
};
/**
 * Type set_signal_parameters corresponding to parameters of the event set.
 */
struct set_signal_parameters {
};
/**
 * Type pause_signal_parameters corresponding to parameters of the event pause.
 */
struct pause_signal_parameters {
};
/**
 * Type resume_signal_parameters corresponding to parameters of the event resume.
 */
struct resume_signal_parameters {
};
/**
 * Type inc_signal_parameters corresponding to parameters of the event inc.
 */
struct inc_signal_parameters {
};
/**
 * Type dec_signal_parameters corresponding to parameters of the event dec.
 */
struct dec_signal_parameters {
};
/**
 * Type pedalPressed_signal_parameters corresponding to parameters of the event pedalPressed.
 */
struct pedalPressed_signal_parameters {
};
/**
 * Type pedalReleased_signal_parameters corresponding to parameters of the event pedalReleased.
 */
struct pedalReleased_signal_parameters {
};
/**
 * Type controlOn_signal_parameters corresponding to parameters of the event controlOn.
 */
struct controlOn_signal_parameters {
};
/**
 * Type controlOff_signal_parameters corresponding to parameters of the event controlOff.
 */
struct controlOff_signal_parameters {
};
/**
 * Type updateSpeed_signal_parameters corresponding to parameters of the event updateSpeed.
 */
struct updateSpeed_signal_parameters {
	int32_t speed;
};
/**
 * Type updateSetPoint_signal_parameters corresponding to parameters of the event updateSetPoint.
 */
struct updateSetPoint_signal_parameters {
	int32_t setPoint;
};

/**
 * Declarations of types for events.
 */
/**
 * Type Actuation_events corresponding to an event of the event pool.
 */
struct Actuation_events {
	union {
		updateSpeed_signal_parameters updateSpeed_params;
	};
};
/**
 * Type CruiseSpeedManager_events corresponding to an event of the event pool.
 */
struct CruiseSpeedManager_events {
	union {
		speedCaptured_signal_parameters speedCaptured_params;
	};
};
/**
 * Type Engine_events corresponding to an event of the event pool.
 */
struct Engine_events {
	union {
		updateSetPoint_signal_parameters updateSetPoint_params;
	};
};
#ifdef WITH_OBSERVERS
#endif /* WITH_OBSERVERS */

/**
 * Declaration of store types.
 */
/**
 * The object data (e.g., attributes) type for the EnvButtonsPort class.
 */
struct EnvButtonsPort_od {
};
/**
 * The store type for the EnvButtonsPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvButtonsPort_store {
};
/**
 * The object data (e.g., attributes) type for the EnvPedalPort class.
 */
struct EnvPedalPort_od {
};
/**
 * The store type for the EnvPedalPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvPedalPort_store {
};
/**
 * The object data (e.g., attributes) type for the EnvControlOnOffPort class.
 */
struct EnvControlOnOffPort_od {
};
/**
 * The store type for the EnvControlOnOffPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvControlOnOffPort_store {
};
/**
 * The object data (e.g., attributes) type for the EnvSpeedPort class.
 */
struct EnvSpeedPort_od {
};
/**
 * The store type for the EnvSpeedPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvSpeedPort_store {
};
/**
 * The object data (e.g., attributes) type for the EnvCruiseSpeedPort class.
 */
struct EnvCruiseSpeedPort_od {
};
/**
 * The store type for the EnvCruiseSpeedPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct EnvCruiseSpeedPort_store {
};
/**
 * The object data (e.g., attributes) type for the Env class.
 */
struct Env_od {
};
/**
 * The store type for the Env class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Env_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonsPort class.
 */
struct ButtonsPort_od {
};
/**
 * The store type for the ButtonsPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonsPort_store {
};
/**
 * The object data (e.g., attributes) type for the Buttons class.
 */
struct Buttons_od {
};
/**
 * The store type for the Buttons class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Buttons_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the PedalPort class.
 */
struct PedalPort_od {
};
/**
 * The store type for the PedalPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PedalPort_store {
};
/**
 * The object data (e.g., attributes) type for the Pedal class.
 */
struct Pedal_od {
	NbEnumerationLiteral_t port;
	NbEnumerationLiteral_t pin;
};
/**
 * The store type for the Pedal class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Pedal_store {
	uint32_t cs;
	EventPoolStore ep;
	Pedal_od od;
};
/**
 * The event pool parameters type for the Engine class.
 */
struct Engine_ep_params {
	Engine_events eventOccurred[EVENT_POOL_SIZE];
};
/**
 * The object data (e.g., attributes) type for the Engine class.
 */
struct Engine_od {
	int32_t speed;
	NbEnumerationLiteral_t timer;
	NbEnumerationLiteral_t channel;
};
/**
 * The store type for the Engine class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Engine_store {
	uint32_t cs;
	EventPoolStore ep;
	Engine_ep_params ep_params;
	Engine_od od;
};
/**
 * The object data (e.g., attributes) type for the Main class.
 */
struct Main_od {
};
/**
 * The store type for the Main class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Main_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonProvider class.
 */
struct ButtonProvider_od {
};
/**
 * The store type for the ButtonProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonProvider_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonUser class.
 */
struct ButtonUser_od {
};
/**
 * The store type for the ButtonUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonUser_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonPort class.
 */
struct ButtonPort_od {
};
/**
 * The store type for the ButtonPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonPort_store {
};
/**
 * The object data (e.g., attributes) type for the GpioButton class.
 */
struct GpioButton_od {
	NbEnumerationLiteral_t port;
	NbEnumerationLiteral_t pin;
};
/**
 * The store type for the GpioButton class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct GpioButton_store {
	uint32_t cs;
	EventPoolStore ep;
	GpioButton_od od;
};
/**
 * The object data (e.g., attributes) type for the Obs class.
 */
struct Obs_od {
};
/**
 * The store type for the Obs class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Obs_store {
};
/**
 * The object data (e.g., attributes) type for the Observer1 class.
 */
struct Observer1_od {
};
/**
 * The store type for the Observer1 class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Observer1_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the Observer2 class.
 */
struct Observer2_od {
};
/**
 * The store type for the Observer2 class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Observer2_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the Observer3 class.
 */
struct Observer3_od {
};
/**
 * The store type for the Observer3 class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Observer3_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the CCIButtonsPort class.
 */
struct CCIButtonsPort_od {
};
/**
 * The store type for the CCIButtonsPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCIButtonsPort_store {
};
/**
 * The object data (e.g., attributes) type for the CCIPedalPort class.
 */
struct CCIPedalPort_od {
};
/**
 * The store type for the CCIPedalPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCIPedalPort_store {
};
/**
 * The object data (e.g., attributes) type for the CCIControlOnOffPort class.
 */
struct CCIControlOnOffPort_od {
};
/**
 * The store type for the CCIControlOnOffPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCIControlOnOffPort_store {
};
/**
 * The object data (e.g., attributes) type for the CCISpeedPort class.
 */
struct CCISpeedPort_od {
};
/**
 * The store type for the CCISpeedPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCISpeedPort_store {
};
/**
 * The object data (e.g., attributes) type for the CCICruiseSpeedPort class.
 */
struct CCICruiseSpeedPort_od {
};
/**
 * The store type for the CCICruiseSpeedPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCICruiseSpeedPort_store {
};
/**
 * The object data (e.g., attributes) type for the PedalsManagerPedalPort class.
 */
struct PedalsManagerPedalPort_od {
};
/**
 * The store type for the PedalsManagerPedalPort class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PedalsManagerPedalPort_store {
};
/**
 * The object data (e.g., attributes) type for the CCI class.
 */
struct CCI_od {
};
/**
 * The store type for the CCI class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CCI_store {
};
/**
 * The event pool parameters type for the Actuation class.
 */
struct Actuation_ep_params {
	Actuation_events eventOccurred[EVENT_POOL_SIZE];
};
/**
 * The object data (e.g., attributes) type for the Actuation class.
 */
struct Actuation_od {
};
/**
 * The store type for the Actuation class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Actuation_store {
	uint32_t cs;
	EventPoolStore ep;
	Actuation_ep_params ep_params;
};
/**
 * The event pool parameters type for the CruiseSpeedManager class.
 */
struct CruiseSpeedManager_ep_params {
	CruiseSpeedManager_events eventOccurred[EVENT_POOL_SIZE];
};
/**
 * The object data (e.g., attributes) type for the CruiseSpeedManager class.
 */
struct CruiseSpeedManager_od {
	int32_t cruiseSpeed;
};
/**
 * The store type for the CruiseSpeedManager class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CruiseSpeedManager_store {
	uint32_t cs;
	EventPoolStore ep;
	CruiseSpeedManager_ep_params ep_params;
	CruiseSpeedManager_od od;
};
/**
 * The object data (e.g., attributes) type for the PedalsManager class.
 */
struct PedalsManager_od {
	int32_t nbLocks;
	int8_t canResume;
};
/**
 * The store type for the PedalsManager class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PedalsManager_store {
	uint32_t cs;
	EventPoolStore ep;
	PedalsManager_od od;
};
/**
 * The object data (e.g., attributes) type for the Controller class.
 */
struct Controller_od {
};
/**
 * The store type for the Controller class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct Controller_store {
	uint32_t cs;
	EventPoolStore ep;
};
/**
 * The object data (e.g., attributes) type for the ButtonsProvider class.
 */
struct ButtonsProvider_od {
};
/**
 * The store type for the ButtonsProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonsProvider_store {
};
/**
 * The object data (e.g., attributes) type for the ButtonsUser class.
 */
struct ButtonsUser_od {
};
/**
 * The store type for the ButtonsUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ButtonsUser_store {
};
/**
 * The object data (e.g., attributes) type for the PedalProvider class.
 */
struct PedalProvider_od {
};
/**
 * The store type for the PedalProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PedalProvider_store {
};
/**
 * The object data (e.g., attributes) type for the PedalUser class.
 */
struct PedalUser_od {
};
/**
 * The store type for the PedalUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct PedalUser_store {
};
/**
 * The object data (e.g., attributes) type for the ControlOnOffProvider class.
 */
struct ControlOnOffProvider_od {
};
/**
 * The store type for the ControlOnOffProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControlOnOffProvider_store {
};
/**
 * The object data (e.g., attributes) type for the ControlOnOffUser class.
 */
struct ControlOnOffUser_od {
};
/**
 * The store type for the ControlOnOffUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct ControlOnOffUser_store {
};
/**
 * The object data (e.g., attributes) type for the SpeedProvider class.
 */
struct SpeedProvider_od {
};
/**
 * The store type for the SpeedProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct SpeedProvider_store {
};
/**
 * The object data (e.g., attributes) type for the SpeedUser class.
 */
struct SpeedUser_od {
};
/**
 * The store type for the SpeedUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct SpeedUser_store {
};
/**
 * The object data (e.g., attributes) type for the CruiseSpeedProvider class.
 */
struct CruiseSpeedProvider_od {
};
/**
 * The store type for the CruiseSpeedProvider class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CruiseSpeedProvider_store {
};
/**
 * The object data (e.g., attributes) type for the CruiseSpeedUser class.
 */
struct CruiseSpeedUser_od {
};
/**
 * The store type for the CruiseSpeedUser class. It contains:
 * 		 - value of its current state
 * 		 - content of its event pool
 * 		 - values of its attributes
 */
struct CruiseSpeedUser_store {
};
/**
 * The Store type used to gather dynamic data of each active object.
 */
struct Store {
	#ifdef WITH_SCHEDULING_STATE
	uint32_t scheduling_state;
	#endif /* WITH_SCHEDULING_STATE */
	Main_store instMain;
	CCI_store instMain_cci;
	Controller_store instMain_cci_controller;
	Actuation_store instMain_cci_actuation;
	CruiseSpeedManager_store instMain_cci_csm;
	PedalsManager_store instMain_cci_pm;
	PedalsManagerPedalPort_store instMain_cci_pm_pmClutchPedalPort;
	PedalsManagerPedalPort_store instMain_cci_pm_pmBreakPedalPort;
	PedalsManagerPedalPort_store instMain_cci_pm_pmThrottlePedalPort;
	CCIButtonsPort_store instMain_cci_buttonsPort;
	CCIPedalPort_store instMain_cci_clutchPedalPort;
	CCIPedalPort_store instMain_cci_breakPedalPort;
	CCIPedalPort_store instMain_cci_throttlePedalPort;
	CCIControlOnOffPort_store instMain_cci_controlOnOffPort;
	CCISpeedPort_store instMain_cci_speedPort;
	CCICruiseSpeedPort_store instMain_cci_cruiseSpeedPort;
	Env_store instMain_env;
	Buttons_store instMain_env_buttons;
	ButtonsPort_store instMain_env_buttons_portStart;
	ButtonsPort_store instMain_env_buttons_portSet;
	ButtonsPort_store instMain_env_buttons_portPause;
	ButtonsPort_store instMain_env_buttons_portResume;
	ButtonsPort_store instMain_env_buttons_portInc;
	ButtonsPort_store instMain_env_buttons_portDec;
	ButtonsPort_store instMain_env_buttons_portStop;
	Pedal_store instMain_env_clutchPedal;
	PedalPort_store instMain_env_clutchPedal_pedalPeer;
	Pedal_store instMain_env_breakPedal;
	PedalPort_store instMain_env_breakPedal_pedalPeer;
	Pedal_store instMain_env_throttlePedal;
	PedalPort_store instMain_env_throttlePedal_pedalPeer;
	Engine_store instMain_env_engine;
	GpioButton_store instMain_env_buttonStart;
	ButtonPort_store instMain_env_buttonStart_buttonPeer;
	GpioButton_store instMain_env_buttonSet;
	ButtonPort_store instMain_env_buttonSet_buttonPeer;
	GpioButton_store instMain_env_buttonPause;
	ButtonPort_store instMain_env_buttonPause_buttonPeer;
	GpioButton_store instMain_env_buttonResume;
	ButtonPort_store instMain_env_buttonResume_buttonPeer;
	GpioButton_store instMain_env_buttonInc;
	ButtonPort_store instMain_env_buttonInc_buttonPeer;
	GpioButton_store instMain_env_buttonDec;
	ButtonPort_store instMain_env_buttonDec_buttonPeer;
	GpioButton_store instMain_env_buttonStop;
	ButtonPort_store instMain_env_buttonStop_buttonPeer;
	EnvButtonsPort_store instMain_env_envButtonsPort;
	EnvPedalPort_store instMain_env_envClutchPedalPort;
	EnvPedalPort_store instMain_env_envBreakPedalPort;
	EnvPedalPort_store instMain_env_envThrottlePedalPort;
	EnvControlOnOffPort_store instMain_env_envControlOnOffPort;
	EnvSpeedPort_store instMain_env_envSpeedPort;
	EnvCruiseSpeedPort_store instMain_env_envCruiseSpeedPort;
	#ifdef WITH_OBSERVERS
	Obs_store instObs;
	Observer1_store instObs_observer1;
	Observer2_store instObs_observer2;
	Observer3_store instObs_observer3;
	#endif /* WITH_OBSERVERS */
};
extern Store store;

#ifdef ANALYSIS_WITH_DIFF
extern Store refStore;
#endif /* ANALYSIS_WITH_DIFF */

/**
 * The SignalEvents type used to gather all signal events.
 */
struct SignalEvents {
	UML_SignalEvent * buttonPressed;
	UML_SignalEvent * lock;
	UML_SignalEvent * unlock;
	UML_SignalEvent * requestPedals;
	UML_SignalEvent * ackPedals;
	UML_SignalEvent * nackPedals;
	UML_SignalEvent * setCS;
	UML_SignalEvent * incCS;
	UML_SignalEvent * decCS;
	UML_SignalEvent * ackCS;
	UML_SignalEvent * nackCS;
	UML_SignalEvent * resetCS;
	UML_SignalEvent * engage;
	UML_SignalEvent * disengage;
	UML_SignalEvent * disengaged;
	UML_SignalEvent * speedCaptured;
	UML_SignalEvent * speedNotCaptured;
	UML_SignalEvent * requestSetPoint;
	UML_SignalEvent * start;
	UML_SignalEvent * stop;
	UML_SignalEvent * set;
	UML_SignalEvent * pause;
	UML_SignalEvent * resume;
	UML_SignalEvent * inc;
	UML_SignalEvent * dec;
	UML_SignalEvent * pedalPressed;
	UML_SignalEvent * pedalReleased;
	UML_SignalEvent * controlOn;
	UML_SignalEvent * controlOff;
	UML_SignalEvent * updateSpeed;
	UML_SignalEvent * updateSetPoint;
};
extern SignalEvents globalSignalEvents;


/**
 * Structures initializer for operations.
 */
struct PedalPort_operations {
};

struct PedalsManagerPedalPort_operations {
};

struct CCI_operations {
};

struct CruiseSpeedProvider_operations {
};

struct ButtonProvider_operations {
};

struct Observer1_operations {
};

struct Main_operations {
};

struct ControlOnOffProvider_operations {
};

struct Pedal_operations {
};

struct CCIControlOnOffPort_operations {
};

struct ButtonUser_operations {
};

struct CCIButtonsPort_operations {
};

struct Controller_operations {
};

struct Actuation_operations {
};

struct Engine_operations {
};

struct Env_operations {
};

struct ButtonsProvider_operations {
};

struct PedalProvider_operations {
};

struct SpeedUser_operations {
};

struct ControlOnOffUser_operations {
};

struct Buttons_operations {
};

struct PedalsManager_operations {
};

struct CruiseSpeedUser_operations {
};

struct PedalUser_operations {
};

struct EnvButtonsPort_operations {
};

struct ButtonsUser_operations {
};

struct EnvPedalPort_operations {
};

struct EnvControlOnOffPort_operations {
};

struct ButtonPort_operations {
};

struct CruiseSpeedManager_operations {
};

struct EnvSpeedPort_operations {
};

struct Obs_operations {
};

struct CCICruiseSpeedPort_operations {
};

struct SpeedProvider_operations {
};

struct EnvCruiseSpeedPort_operations {
};

struct GpioButton_operations {
};

struct ButtonsPort_operations {
};

struct Observer3_operations {
};

struct CCIPedalPort_operations {
};

struct Observer2_operations {
};

struct CCISpeedPort_operations {
};


/**
 * Macros for the mutability field of mutability structure.
 */
#define ABSTRACT_MUTABILITY_EnvButtonsPort  bool buttons_isMutable		:1;	\
	bool cciButtonsPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvPedalPort  bool cciPedalPort_isMutable		:1;	\
	bool pedal_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvControlOnOffPort  bool cciControlOnOffPort_isMutable		:1;	\
	bool engine_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvSpeedPort  bool engine_isMutable		:1;	\
	bool cciSpeedPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_EnvCruiseSpeedPort  bool engine_isMutable		:1;	\
	bool cciCruiseSpeedPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_Env  bool envClutchPedalPort_isMutable		:1;	\
	bool buttonStart_isMutable		:1;	\
	bool engine_isMutable		:1;	\
	bool envControlOnOffPort_isMutable		:1;	\
	bool throttlePedal_isMutable		:1;	\
	bool buttons_isMutable		:1;	\
	bool buttonPause_isMutable		:1;	\
	bool buttonDec_isMutable		:1;	\
	bool buttonInc_isMutable		:1;	\
	bool envBreakPedalPort_isMutable		:1;	\
	bool envSpeedPort_isMutable		:1;	\
	bool buttonResume_isMutable		:1;	\
	bool envCruiseSpeedPort_isMutable		:1;	\
	bool envButtonsPort_isMutable		:1;	\
	bool buttonSet_isMutable		:1;	\
	bool breakPedal_isMutable		:1;	\
	bool envThrottlePedalPort_isMutable		:1;	\
	bool clutchPedal_isMutable		:1;	\
	bool buttonStop_isMutable		:1;

#define ABSTRACT_MUTABILITY_ButtonsPort  bool buttonSet_isMutable		:1;	\
	bool buttonStart_isMutable		:1;	\
	bool buttonResume_isMutable		:1;	\
	bool buttonDec_isMutable		:1;	\
	bool buttonStop_isMutable		:1;	\
	bool buttonInc_isMutable		:1;	\
	bool buttonPause_isMutable		:1;

#define ABSTRACT_MUTABILITY_Buttons  bool envButtonsPort_isMutable		:1;	\
	bool portDec_isMutable		:1;	\
	bool portStart_isMutable		:1;	\
	bool portResume_isMutable		:1;	\
	bool portSet_isMutable		:1;	\
	bool portStop_isMutable		:1;	\
	bool portInc_isMutable		:1;	\
	bool portPause_isMutable		:1;

#define ABSTRACT_MUTABILITY_PedalPort  bool envPedalPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_Pedal  bool pedalPeer_isMutable		:1;	\
	bool port_isMutable		:1;	\
	bool pin_isMutable		:1;

#define ABSTRACT_MUTABILITY_Engine  bool envControlOnOffPort_isMutable		:1;	\
	bool envSpeedPort_isMutable		:1;	\
	bool envCruiseSpeedPort_isMutable		:1;	\
	bool speed_isMutable		:1;	\
	bool timer_isMutable		:1;	\
	bool channel_isMutable		:1;

#define ABSTRACT_MUTABILITY_Main  bool env_isMutable		:1;	\
	bool cci_isMutable		:1;

#define ABSTRACT_MUTABILITY_ButtonProvider  

#define ABSTRACT_MUTABILITY_ButtonUser  

#define ABSTRACT_MUTABILITY_ButtonPort  bool buttonsForDec_isMutable		:1;	\
	bool buttonsForStop_isMutable		:1;	\
	bool buttonsForStart_isMutable		:1;	\
	bool buttonsForSet_isMutable		:1;	\
	bool buttonsForPause_isMutable		:1;	\
	bool buttonsForResume_isMutable		:1;	\
	bool buttonsForInc_isMutable		:1;

#define ABSTRACT_MUTABILITY_GpioButton  bool buttonPeer_isMutable		:1;	\
	bool port_isMutable		:1;	\
	bool pin_isMutable		:1;

#define ABSTRACT_MUTABILITY_Obs  bool observer1_isMutable		:1;	\
	bool observer3_isMutable		:1;	\
	bool observer2_isMutable		:1;

#define ABSTRACT_MUTABILITY_Observer1  

#define ABSTRACT_MUTABILITY_Observer2  

#define ABSTRACT_MUTABILITY_Observer3  

#define ABSTRACT_MUTABILITY_CCIButtonsPort  bool envButtonsPort_isMutable		:1;	\
	bool controller_isMutable		:1;

#define ABSTRACT_MUTABILITY_CCIPedalPort  bool envPedalPort_isMutable		:1;	\
	bool pmPedalPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_CCIControlOnOffPort  bool envControlOnOffPort_isMutable		:1;	\
	bool actuation_isMutable		:1;

#define ABSTRACT_MUTABILITY_CCISpeedPort  bool actuation_isMutable		:1;	\
	bool envSpeedPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_CCICruiseSpeedPort  bool csm_isMutable		:1;	\
	bool envCruiseSpeedPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_PedalsManagerPedalPort  bool cciPedalPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_CCI  bool speedPort_isMutable		:1;	\
	bool cruiseSpeedPort_isMutable		:1;	\
	bool actuation_isMutable		:1;	\
	bool throttlePedalPort_isMutable		:1;	\
	bool clutchPedalPort_isMutable		:1;	\
	bool pm_isMutable		:1;	\
	bool buttonsPort_isMutable		:1;	\
	bool breakPedalPort_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool csm_isMutable		:1;	\
	bool controlOnOffPort_isMutable		:1;

#define ABSTRACT_MUTABILITY_Actuation  bool cciControlOnOffPort_isMutable		:1;	\
	bool csm_isMutable		:1;	\
	bool cciSpeedPort_isMutable		:1;	\
	bool controller_isMutable		:1;

#define ABSTRACT_MUTABILITY_CruiseSpeedManager  bool actuation_isMutable		:1;	\
	bool cciCruiseSpeedPort_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool cruiseSpeed_isMutable		:1;

#define ABSTRACT_MUTABILITY_PedalsManager  bool pmBreakPedalPort_isMutable		:1;	\
	bool pmThrottlePedalPort_isMutable		:1;	\
	bool controller_isMutable		:1;	\
	bool pmClutchPedalPort_isMutable		:1;	\
	bool nbLocks_isMutable		:1;	\
	bool canResume_isMutable		:1;

#define ABSTRACT_MUTABILITY_Controller  bool cciButtonsPort_isMutable		:1;	\
	bool pm_isMutable		:1;	\
	bool actuation_isMutable		:1;	\
	bool csm_isMutable		:1;

#define ABSTRACT_MUTABILITY_ButtonsProvider  

#define ABSTRACT_MUTABILITY_ButtonsUser  

#define ABSTRACT_MUTABILITY_PedalProvider  

#define ABSTRACT_MUTABILITY_PedalUser  

#define ABSTRACT_MUTABILITY_ControlOnOffProvider  

#define ABSTRACT_MUTABILITY_ControlOnOffUser  

#define ABSTRACT_MUTABILITY_SpeedProvider  

#define ABSTRACT_MUTABILITY_SpeedUser  

#define ABSTRACT_MUTABILITY_CruiseSpeedProvider  

#define ABSTRACT_MUTABILITY_CruiseSpeedUser  

/**
 * Mutability structures.
 */
struct EnvButtonsPort_mutability {
	ABSTRACT_MUTABILITY_ButtonsUser
	ABSTRACT_MUTABILITY_EnvButtonsPort
};

struct EnvPedalPort_mutability {
	ABSTRACT_MUTABILITY_PedalUser
	ABSTRACT_MUTABILITY_EnvPedalPort
};

struct EnvControlOnOffPort_mutability {
	ABSTRACT_MUTABILITY_ControlOnOffProvider
	ABSTRACT_MUTABILITY_EnvControlOnOffPort
};

struct EnvSpeedPort_mutability {
	ABSTRACT_MUTABILITY_SpeedUser
	ABSTRACT_MUTABILITY_EnvSpeedPort
};

struct EnvCruiseSpeedPort_mutability {
	ABSTRACT_MUTABILITY_CruiseSpeedProvider
	ABSTRACT_MUTABILITY_EnvCruiseSpeedPort
};

struct Env_mutability {
	ABSTRACT_MUTABILITY_Env
};

struct ButtonsPort_mutability {
	ABSTRACT_MUTABILITY_ButtonProvider
	ABSTRACT_MUTABILITY_ButtonsPort
};

struct Buttons_mutability {
	ABSTRACT_MUTABILITY_ButtonsUser
	ABSTRACT_MUTABILITY_Buttons
};

struct PedalPort_mutability {
	ABSTRACT_MUTABILITY_PedalUser
	ABSTRACT_MUTABILITY_PedalPort
};

struct Pedal_mutability {
	ABSTRACT_MUTABILITY_PedalUser
	ABSTRACT_MUTABILITY_Pedal
};

struct Engine_mutability {
	ABSTRACT_MUTABILITY_Engine
};

struct Main_mutability {
	ABSTRACT_MUTABILITY_Main
};

struct ButtonProvider_mutability {
	ABSTRACT_MUTABILITY_ButtonProvider
};

struct ButtonUser_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
};

struct ButtonPort_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
	ABSTRACT_MUTABILITY_ButtonPort
};

struct GpioButton_mutability {
	ABSTRACT_MUTABILITY_ButtonUser
	ABSTRACT_MUTABILITY_GpioButton
};

struct Obs_mutability {
	ABSTRACT_MUTABILITY_Obs
};

struct Observer1_mutability {
	ABSTRACT_MUTABILITY_Observer1
};

struct Observer2_mutability {
	ABSTRACT_MUTABILITY_Observer2
};

struct Observer3_mutability {
	ABSTRACT_MUTABILITY_Observer3
};

struct CCIButtonsPort_mutability {
	ABSTRACT_MUTABILITY_ButtonsProvider
	ABSTRACT_MUTABILITY_CCIButtonsPort
};

struct CCIPedalPort_mutability {
	ABSTRACT_MUTABILITY_PedalProvider
	ABSTRACT_MUTABILITY_CCIPedalPort
};

struct CCIControlOnOffPort_mutability {
	ABSTRACT_MUTABILITY_ControlOnOffUser
	ABSTRACT_MUTABILITY_CCIControlOnOffPort
};

struct CCISpeedPort_mutability {
	ABSTRACT_MUTABILITY_SpeedProvider
	ABSTRACT_MUTABILITY_CCISpeedPort
};

struct CCICruiseSpeedPort_mutability {
	ABSTRACT_MUTABILITY_CruiseSpeedUser
	ABSTRACT_MUTABILITY_CCICruiseSpeedPort
};

struct PedalsManagerPedalPort_mutability {
	ABSTRACT_MUTABILITY_PedalProvider
	ABSTRACT_MUTABILITY_PedalsManagerPedalPort
};

struct CCI_mutability {
	ABSTRACT_MUTABILITY_CCI
};

struct Actuation_mutability {
	ABSTRACT_MUTABILITY_ControlOnOffUser
	ABSTRACT_MUTABILITY_Actuation
};

struct CruiseSpeedManager_mutability {
	ABSTRACT_MUTABILITY_CruiseSpeedUser
	ABSTRACT_MUTABILITY_CruiseSpeedManager
};

struct PedalsManager_mutability {
	ABSTRACT_MUTABILITY_PedalProvider
	ABSTRACT_MUTABILITY_PedalsManager
};

struct Controller_mutability {
	ABSTRACT_MUTABILITY_ButtonsProvider
	ABSTRACT_MUTABILITY_Controller
};

struct ButtonsProvider_mutability {
	ABSTRACT_MUTABILITY_ButtonsProvider
};

struct ButtonsUser_mutability {
	ABSTRACT_MUTABILITY_ButtonsUser
};

struct PedalProvider_mutability {
	ABSTRACT_MUTABILITY_PedalProvider
};

struct PedalUser_mutability {
	ABSTRACT_MUTABILITY_PedalUser
};

struct ControlOnOffProvider_mutability {
	ABSTRACT_MUTABILITY_ControlOnOffProvider
};

struct ControlOnOffUser_mutability {
	ABSTRACT_MUTABILITY_ControlOnOffUser
};

struct SpeedProvider_mutability {
	ABSTRACT_MUTABILITY_SpeedProvider
};

struct SpeedUser_mutability {
	ABSTRACT_MUTABILITY_SpeedUser
};

struct CruiseSpeedProvider_mutability {
	ABSTRACT_MUTABILITY_CruiseSpeedProvider
};

struct CruiseSpeedUser_mutability {
	ABSTRACT_MUTABILITY_CruiseSpeedUser
};

/**
 * Macros for the properties_types field of properties type structure.
 */
#define ABSTRACT_PROPERTIES_TYPE_EnvButtonsPort  EnvButtonsPort_properties_ro * buttons_type;	\
	EnvButtonsPort_properties_ro * cciButtonsPort_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvPedalPort  EnvPedalPort_properties_ro * cciPedalPort_type;	\
	EnvPedalPort_properties_ro * pedal_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvControlOnOffPort  EnvControlOnOffPort_properties_ro * cciControlOnOffPort_type;	\
	EnvControlOnOffPort_properties_ro * engine_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvSpeedPort  EnvSpeedPort_properties_ro * engine_type;	\
	EnvSpeedPort_properties_ro * cciSpeedPort_type;

#define ABSTRACT_PROPERTIES_TYPE_EnvCruiseSpeedPort  EnvCruiseSpeedPort_properties_ro * engine_type;	\
	EnvCruiseSpeedPort_properties_ro * cciCruiseSpeedPort_type;

#define ABSTRACT_PROPERTIES_TYPE_Env  Env_properties_ro * envClutchPedalPort_type;	\
	Env_properties_ro * buttonStart_type;	\
	Env_properties_ro * engine_type;	\
	Env_properties_ro * envControlOnOffPort_type;	\
	Env_properties_ro * throttlePedal_type;	\
	Env_properties_ro * buttons_type;	\
	Env_properties_ro * buttonPause_type;	\
	Env_properties_ro * buttonDec_type;	\
	Env_properties_ro * buttonInc_type;	\
	Env_properties_ro * envBreakPedalPort_type;	\
	Env_properties_ro * envSpeedPort_type;	\
	Env_properties_ro * buttonResume_type;	\
	Env_properties_ro * envCruiseSpeedPort_type;	\
	Env_properties_ro * envButtonsPort_type;	\
	Env_properties_ro * buttonSet_type;	\
	Env_properties_ro * breakPedal_type;	\
	Env_properties_ro * envThrottlePedalPort_type;	\
	Env_properties_ro * clutchPedal_type;	\
	Env_properties_ro * buttonStop_type;

#define ABSTRACT_PROPERTIES_TYPE_ButtonsPort  ButtonsPort_properties_ro * buttonSet_type;	\
	ButtonsPort_properties_ro * buttonStart_type;	\
	ButtonsPort_properties_ro * buttonResume_type;	\
	ButtonsPort_properties_ro * buttonDec_type;	\
	ButtonsPort_properties_ro * buttonStop_type;	\
	ButtonsPort_properties_ro * buttonInc_type;	\
	ButtonsPort_properties_ro * buttonPause_type;

#define ABSTRACT_PROPERTIES_TYPE_Buttons  Buttons_properties_ro * envButtonsPort_type;	\
	Buttons_properties_ro * portDec_type;	\
	Buttons_properties_ro * portStart_type;	\
	Buttons_properties_ro * portResume_type;	\
	Buttons_properties_ro * portSet_type;	\
	Buttons_properties_ro * portStop_type;	\
	Buttons_properties_ro * portInc_type;	\
	Buttons_properties_ro * portPause_type;

#define ABSTRACT_PROPERTIES_TYPE_PedalPort  PedalPort_properties_ro * envPedalPort_type;

#define ABSTRACT_PROPERTIES_TYPE_Pedal  Pedal_properties_ro * pedalPeer_type;	\
	Pedal_od * port_type;	\
	Pedal_od * pin_type;

#define ABSTRACT_PROPERTIES_TYPE_Engine  Engine_properties_ro * envControlOnOffPort_type;	\
	Engine_properties_ro * envSpeedPort_type;	\
	Engine_properties_ro * envCruiseSpeedPort_type;	\
	Engine_od * speed_type;	\
	Engine_od * timer_type;	\
	Engine_od * channel_type;

#define ABSTRACT_PROPERTIES_TYPE_Main  Main_properties_ro * env_type;	\
	Main_properties_ro * cci_type;

#define ABSTRACT_PROPERTIES_TYPE_ButtonProvider  

#define ABSTRACT_PROPERTIES_TYPE_ButtonUser  

#define ABSTRACT_PROPERTIES_TYPE_ButtonPort  ButtonPort_properties_ro * buttonsForDec_type;	\
	ButtonPort_properties_ro * buttonsForStop_type;	\
	ButtonPort_properties_ro * buttonsForStart_type;	\
	ButtonPort_properties_ro * buttonsForSet_type;	\
	ButtonPort_properties_ro * buttonsForPause_type;	\
	ButtonPort_properties_ro * buttonsForResume_type;	\
	ButtonPort_properties_ro * buttonsForInc_type;

#define ABSTRACT_PROPERTIES_TYPE_GpioButton  GpioButton_properties_ro * buttonPeer_type;	\
	GpioButton_od * port_type;	\
	GpioButton_od * pin_type;

#define ABSTRACT_PROPERTIES_TYPE_Obs  Obs_properties_ro * observer1_type;	\
	Obs_properties_ro * observer3_type;	\
	Obs_properties_ro * observer2_type;

#define ABSTRACT_PROPERTIES_TYPE_Observer1  

#define ABSTRACT_PROPERTIES_TYPE_Observer2  

#define ABSTRACT_PROPERTIES_TYPE_Observer3  

#define ABSTRACT_PROPERTIES_TYPE_CCIButtonsPort  CCIButtonsPort_properties_ro * envButtonsPort_type;	\
	CCIButtonsPort_properties_ro * controller_type;

#define ABSTRACT_PROPERTIES_TYPE_CCIPedalPort  CCIPedalPort_properties_ro * envPedalPort_type;	\
	CCIPedalPort_properties_ro * pmPedalPort_type;

#define ABSTRACT_PROPERTIES_TYPE_CCIControlOnOffPort  CCIControlOnOffPort_properties_ro * envControlOnOffPort_type;	\
	CCIControlOnOffPort_properties_ro * actuation_type;

#define ABSTRACT_PROPERTIES_TYPE_CCISpeedPort  CCISpeedPort_properties_ro * actuation_type;	\
	CCISpeedPort_properties_ro * envSpeedPort_type;

#define ABSTRACT_PROPERTIES_TYPE_CCICruiseSpeedPort  CCICruiseSpeedPort_properties_ro * csm_type;	\
	CCICruiseSpeedPort_properties_ro * envCruiseSpeedPort_type;

#define ABSTRACT_PROPERTIES_TYPE_PedalsManagerPedalPort  PedalsManagerPedalPort_properties_ro * cciPedalPort_type;

#define ABSTRACT_PROPERTIES_TYPE_CCI  CCI_properties_ro * speedPort_type;	\
	CCI_properties_ro * cruiseSpeedPort_type;	\
	CCI_properties_ro * actuation_type;	\
	CCI_properties_ro * throttlePedalPort_type;	\
	CCI_properties_ro * clutchPedalPort_type;	\
	CCI_properties_ro * pm_type;	\
	CCI_properties_ro * buttonsPort_type;	\
	CCI_properties_ro * breakPedalPort_type;	\
	CCI_properties_ro * controller_type;	\
	CCI_properties_ro * csm_type;	\
	CCI_properties_ro * controlOnOffPort_type;

#define ABSTRACT_PROPERTIES_TYPE_Actuation  Actuation_properties_ro * cciControlOnOffPort_type;	\
	Actuation_properties_ro * csm_type;	\
	Actuation_properties_ro * cciSpeedPort_type;	\
	Actuation_properties_ro * controller_type;

#define ABSTRACT_PROPERTIES_TYPE_CruiseSpeedManager  CruiseSpeedManager_properties_ro * actuation_type;	\
	CruiseSpeedManager_properties_ro * cciCruiseSpeedPort_type;	\
	CruiseSpeedManager_properties_ro * controller_type;	\
	CruiseSpeedManager_od * cruiseSpeed_type;

#define ABSTRACT_PROPERTIES_TYPE_PedalsManager  PedalsManager_properties_ro * pmBreakPedalPort_type;	\
	PedalsManager_properties_ro * pmThrottlePedalPort_type;	\
	PedalsManager_properties_ro * controller_type;	\
	PedalsManager_properties_ro * pmClutchPedalPort_type;	\
	PedalsManager_od * nbLocks_type;	\
	PedalsManager_od * canResume_type;

#define ABSTRACT_PROPERTIES_TYPE_Controller  Controller_properties_ro * cciButtonsPort_type;	\
	Controller_properties_ro * pm_type;	\
	Controller_properties_ro * actuation_type;	\
	Controller_properties_ro * csm_type;

#define ABSTRACT_PROPERTIES_TYPE_ButtonsProvider  

#define ABSTRACT_PROPERTIES_TYPE_ButtonsUser  

#define ABSTRACT_PROPERTIES_TYPE_PedalProvider  

#define ABSTRACT_PROPERTIES_TYPE_PedalUser  

#define ABSTRACT_PROPERTIES_TYPE_ControlOnOffProvider  

#define ABSTRACT_PROPERTIES_TYPE_ControlOnOffUser  

#define ABSTRACT_PROPERTIES_TYPE_SpeedProvider  

#define ABSTRACT_PROPERTIES_TYPE_SpeedUser  

#define ABSTRACT_PROPERTIES_TYPE_CruiseSpeedProvider  

#define ABSTRACT_PROPERTIES_TYPE_CruiseSpeedUser  

/**
 * Properties type structures.
 */
struct EnvButtonsPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsUser
	ABSTRACT_PROPERTIES_TYPE_EnvButtonsPort
};

struct EnvPedalPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalUser
	ABSTRACT_PROPERTIES_TYPE_EnvPedalPort
};

struct EnvControlOnOffPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControlOnOffProvider
	ABSTRACT_PROPERTIES_TYPE_EnvControlOnOffPort
};

struct EnvSpeedPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_SpeedUser
	ABSTRACT_PROPERTIES_TYPE_EnvSpeedPort
};

struct EnvCruiseSpeedPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedProvider
	ABSTRACT_PROPERTIES_TYPE_EnvCruiseSpeedPort
};

struct Env_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Env
};

struct ButtonsPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonProvider
	ABSTRACT_PROPERTIES_TYPE_ButtonsPort
};

struct Buttons_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsUser
	ABSTRACT_PROPERTIES_TYPE_Buttons
};

struct PedalPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalUser
	ABSTRACT_PROPERTIES_TYPE_PedalPort
};

struct Pedal_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalUser
	ABSTRACT_PROPERTIES_TYPE_Pedal
};

struct Engine_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Engine
};

struct Main_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Main
};

struct ButtonProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonProvider
};

struct ButtonUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
};

struct ButtonPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
	ABSTRACT_PROPERTIES_TYPE_ButtonPort
};

struct GpioButton_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonUser
	ABSTRACT_PROPERTIES_TYPE_GpioButton
};

struct Obs_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Obs
};

struct Observer1_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Observer1
};

struct Observer2_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Observer2
};

struct Observer3_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_Observer3
};

struct CCIButtonsPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsProvider
	ABSTRACT_PROPERTIES_TYPE_CCIButtonsPort
};

struct CCIPedalPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalProvider
	ABSTRACT_PROPERTIES_TYPE_CCIPedalPort
};

struct CCIControlOnOffPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControlOnOffUser
	ABSTRACT_PROPERTIES_TYPE_CCIControlOnOffPort
};

struct CCISpeedPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_SpeedProvider
	ABSTRACT_PROPERTIES_TYPE_CCISpeedPort
};

struct CCICruiseSpeedPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedUser
	ABSTRACT_PROPERTIES_TYPE_CCICruiseSpeedPort
};

struct PedalsManagerPedalPort_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalProvider
	ABSTRACT_PROPERTIES_TYPE_PedalsManagerPedalPort
};

struct CCI_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CCI
};

struct Actuation_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControlOnOffUser
	ABSTRACT_PROPERTIES_TYPE_Actuation
};

struct CruiseSpeedManager_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedUser
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedManager
};

struct PedalsManager_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalProvider
	ABSTRACT_PROPERTIES_TYPE_PedalsManager
};

struct Controller_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsProvider
	ABSTRACT_PROPERTIES_TYPE_Controller
};

struct ButtonsProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsProvider
};

struct ButtonsUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ButtonsUser
};

struct PedalProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalProvider
};

struct PedalUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_PedalUser
};

struct ControlOnOffProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControlOnOffProvider
};

struct ControlOnOffUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_ControlOnOffUser
};

struct SpeedProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_SpeedProvider
};

struct SpeedUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_SpeedUser
};

struct CruiseSpeedProvider_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedProvider
};

struct CruiseSpeedUser_PropertiesTypes {
	ABSTRACT_PROPERTIES_TYPE_CruiseSpeedUser
};


/**
 * Class information structures.
 */
struct EnvButtonsPort_classInfo {
	union {
		UML_Class * type;
		const EnvButtonsPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvButtonsPort_mutability mutability;
};

struct EnvPedalPort_classInfo {
	union {
		UML_Class * type;
		const EnvPedalPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvPedalPort_mutability mutability;
};

struct EnvControlOnOffPort_classInfo {
	union {
		UML_Class * type;
		const EnvControlOnOffPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvControlOnOffPort_mutability mutability;
};

struct EnvSpeedPort_classInfo {
	union {
		UML_Class * type;
		const EnvSpeedPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvSpeedPort_mutability mutability;
};

struct EnvCruiseSpeedPort_classInfo {
	union {
		UML_Class * type;
		const EnvCruiseSpeedPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	EnvCruiseSpeedPort_mutability mutability;
};

struct Env_classInfo {
	union {
		UML_Class * type;
		const Env_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Env_mutability mutability;
};

struct ButtonsPort_classInfo {
	union {
		UML_Class * type;
		const ButtonsPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonsPort_mutability mutability;
};

struct Buttons_classInfo {
	union {
		UML_Class * type;
		const Buttons_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Buttons_mutability mutability;
};

struct PedalPort_classInfo {
	union {
		UML_Class * type;
		const PedalPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PedalPort_mutability mutability;
};

struct Pedal_classInfo {
	union {
		UML_Class * type;
		const Pedal_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Pedal_mutability mutability;
};

struct Engine_classInfo {
	union {
		UML_Class * type;
		const Engine_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Engine_mutability mutability;
};

struct Main_classInfo {
	union {
		UML_Class * type;
		const Main_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Main_mutability mutability;
};

struct ButtonProvider_classInfo {
	union {
		UML_Class * type;
		const ButtonProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonProvider_mutability mutability;
};

struct ButtonUser_classInfo {
	union {
		UML_Class * type;
		const ButtonUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonUser_mutability mutability;
};

struct ButtonPort_classInfo {
	union {
		UML_Class * type;
		const ButtonPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonPort_mutability mutability;
};

struct GpioButton_classInfo {
	union {
		UML_Class * type;
		const GpioButton_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	GpioButton_mutability mutability;
};

struct Obs_classInfo {
	union {
		UML_Class * type;
		const Obs_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Obs_mutability mutability;
};

struct Observer1_classInfo {
	union {
		UML_Class * type;
		const Observer1_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Observer1_mutability mutability;
};

struct Observer2_classInfo {
	union {
		UML_Class * type;
		const Observer2_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Observer2_mutability mutability;
};

struct Observer3_classInfo {
	union {
		UML_Class * type;
		const Observer3_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Observer3_mutability mutability;
};

struct CCIButtonsPort_classInfo {
	union {
		UML_Class * type;
		const CCIButtonsPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCIButtonsPort_mutability mutability;
};

struct CCIPedalPort_classInfo {
	union {
		UML_Class * type;
		const CCIPedalPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCIPedalPort_mutability mutability;
};

struct CCIControlOnOffPort_classInfo {
	union {
		UML_Class * type;
		const CCIControlOnOffPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCIControlOnOffPort_mutability mutability;
};

struct CCISpeedPort_classInfo {
	union {
		UML_Class * type;
		const CCISpeedPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCISpeedPort_mutability mutability;
};

struct CCICruiseSpeedPort_classInfo {
	union {
		UML_Class * type;
		const CCICruiseSpeedPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCICruiseSpeedPort_mutability mutability;
};

struct PedalsManagerPedalPort_classInfo {
	union {
		UML_Class * type;
		const PedalsManagerPedalPort_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PedalsManagerPedalPort_mutability mutability;
};

struct CCI_classInfo {
	union {
		UML_Class * type;
		const CCI_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CCI_mutability mutability;
};

struct Actuation_classInfo {
	union {
		UML_Class * type;
		const Actuation_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Actuation_mutability mutability;
};

struct CruiseSpeedManager_classInfo {
	union {
		UML_Class * type;
		const CruiseSpeedManager_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CruiseSpeedManager_mutability mutability;
};

struct PedalsManager_classInfo {
	union {
		UML_Class * type;
		const PedalsManager_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PedalsManager_mutability mutability;
};

struct Controller_classInfo {
	union {
		UML_Class * type;
		const Controller_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	Controller_mutability mutability;
};

struct ButtonsProvider_classInfo {
	union {
		UML_Class * type;
		const ButtonsProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonsProvider_mutability mutability;
};

struct ButtonsUser_classInfo {
	union {
		UML_Class * type;
		const ButtonsUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ButtonsUser_mutability mutability;
};

struct PedalProvider_classInfo {
	union {
		UML_Class * type;
		const PedalProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PedalProvider_mutability mutability;
};

struct PedalUser_classInfo {
	union {
		UML_Class * type;
		const PedalUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	PedalUser_mutability mutability;
};

struct ControlOnOffProvider_classInfo {
	union {
		UML_Class * type;
		const ControlOnOffProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControlOnOffProvider_mutability mutability;
};

struct ControlOnOffUser_classInfo {
	union {
		UML_Class * type;
		const ControlOnOffUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	ControlOnOffUser_mutability mutability;
};

struct SpeedProvider_classInfo {
	union {
		UML_Class * type;
		const SpeedProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	SpeedProvider_mutability mutability;
};

struct SpeedUser_classInfo {
	union {
		UML_Class * type;
		const SpeedUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	SpeedUser_mutability mutability;
};

struct CruiseSpeedProvider_classInfo {
	union {
		UML_Class * type;
		const CruiseSpeedProvider_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CruiseSpeedProvider_mutability mutability;
};

struct CruiseSpeedUser_classInfo {
	union {
		UML_Class * type;
		const CruiseSpeedUser_PropertiesTypes * properties_types; // Should not be dereferenced
	};
	CruiseSpeedUser_mutability mutability;
};

/**
 * Specific types for active objects.
 */
SPECIFIC_STRUCT_ActiveObject(Buttons)
SPECIFIC_STRUCT_ActiveObject(Pedal)
SPECIFIC_STRUCT_ActiveObject(Engine)
SPECIFIC_STRUCT_ActiveObject(GpioButton)
SPECIFIC_STRUCT_ActiveObject(Observer1)
SPECIFIC_STRUCT_ActiveObject(Observer2)
SPECIFIC_STRUCT_ActiveObject(Observer3)
SPECIFIC_STRUCT_ActiveObject(Actuation)
SPECIFIC_STRUCT_ActiveObject(CruiseSpeedManager)
SPECIFIC_STRUCT_ActiveObject(PedalsManager)
SPECIFIC_STRUCT_ActiveObject(Controller)

/**
 * The ActiveObjects type used to gather all active objects
 */
struct ActiveObjects {
	Controller_Object * instMain_cci_controller;
	Actuation_Object * instMain_cci_actuation;
	CruiseSpeedManager_Object * instMain_cci_csm;
	PedalsManager_Object * instMain_cci_pm;
	Buttons_Object * instMain_env_buttons;
	Pedal_Object * instMain_env_clutchPedal;
	Pedal_Object * instMain_env_breakPedal;
	Pedal_Object * instMain_env_throttlePedal;
	Engine_Object * instMain_env_engine;
	GpioButton_Object * instMain_env_buttonStart;
	GpioButton_Object * instMain_env_buttonSet;
	GpioButton_Object * instMain_env_buttonPause;
	GpioButton_Object * instMain_env_buttonResume;
	GpioButton_Object * instMain_env_buttonInc;
	GpioButton_Object * instMain_env_buttonDec;
	GpioButton_Object * instMain_env_buttonStop;
	#ifdef WITH_OBSERVERS
	Observer1_Object * instObs_observer1;
	Observer2_Object * instObs_observer2;
	Observer3_Object * instObs_observer3;
	#endif /* WITH_OBSERVERS */
};
extern ActiveObjects activeObjects;

/**
 * Specific types for passive objects.
 */
SPECIFIC_STRUCT_PassiveObject(EnvButtonsPort)
SPECIFIC_STRUCT_PassiveObject(EnvPedalPort)
SPECIFIC_STRUCT_PassiveObject(EnvControlOnOffPort)
SPECIFIC_STRUCT_PassiveObject(EnvSpeedPort)
SPECIFIC_STRUCT_PassiveObject(EnvCruiseSpeedPort)
SPECIFIC_STRUCT_PassiveObject(Env)
SPECIFIC_STRUCT_PassiveObject(ButtonsPort)
SPECIFIC_STRUCT_PassiveObject(PedalPort)
SPECIFIC_STRUCT_PassiveObject(Main)
SPECIFIC_STRUCT_PassiveObject(ButtonProvider)
SPECIFIC_STRUCT_PassiveObject(ButtonUser)
SPECIFIC_STRUCT_PassiveObject(ButtonPort)
SPECIFIC_STRUCT_PassiveObject(Obs)
SPECIFIC_STRUCT_PassiveObject(CCIButtonsPort)
SPECIFIC_STRUCT_PassiveObject(CCIPedalPort)
SPECIFIC_STRUCT_PassiveObject(CCIControlOnOffPort)
SPECIFIC_STRUCT_PassiveObject(CCISpeedPort)
SPECIFIC_STRUCT_PassiveObject(CCICruiseSpeedPort)
SPECIFIC_STRUCT_PassiveObject(PedalsManagerPedalPort)
SPECIFIC_STRUCT_PassiveObject(CCI)
SPECIFIC_STRUCT_PassiveObject(ButtonsProvider)
SPECIFIC_STRUCT_PassiveObject(ButtonsUser)
SPECIFIC_STRUCT_PassiveObject(PedalProvider)
SPECIFIC_STRUCT_PassiveObject(PedalUser)
SPECIFIC_STRUCT_PassiveObject(ControlOnOffProvider)
SPECIFIC_STRUCT_PassiveObject(ControlOnOffUser)
SPECIFIC_STRUCT_PassiveObject(SpeedProvider)
SPECIFIC_STRUCT_PassiveObject(SpeedUser)
SPECIFIC_STRUCT_PassiveObject(CruiseSpeedProvider)
SPECIFIC_STRUCT_PassiveObject(CruiseSpeedUser)

/**
 * The PassiveObjects type used to gather all passive objects
 */
struct PassiveObjects {
	Main_Object * instMain;
	CCI_Object * instMain_cci;
	PedalsManagerPedalPort_Object * instMain_cci_pm_pmClutchPedalPort;
	PedalsManagerPedalPort_Object * instMain_cci_pm_pmBreakPedalPort;
	PedalsManagerPedalPort_Object * instMain_cci_pm_pmThrottlePedalPort;
	CCIButtonsPort_Object * instMain_cci_buttonsPort;
	CCIPedalPort_Object * instMain_cci_clutchPedalPort;
	CCIPedalPort_Object * instMain_cci_breakPedalPort;
	CCIPedalPort_Object * instMain_cci_throttlePedalPort;
	CCIControlOnOffPort_Object * instMain_cci_controlOnOffPort;
	CCISpeedPort_Object * instMain_cci_speedPort;
	CCICruiseSpeedPort_Object * instMain_cci_cruiseSpeedPort;
	Env_Object * instMain_env;
	ButtonsPort_Object * instMain_env_buttons_portStart;
	ButtonsPort_Object * instMain_env_buttons_portSet;
	ButtonsPort_Object * instMain_env_buttons_portPause;
	ButtonsPort_Object * instMain_env_buttons_portResume;
	ButtonsPort_Object * instMain_env_buttons_portInc;
	ButtonsPort_Object * instMain_env_buttons_portDec;
	ButtonsPort_Object * instMain_env_buttons_portStop;
	PedalPort_Object * instMain_env_clutchPedal_pedalPeer;
	PedalPort_Object * instMain_env_breakPedal_pedalPeer;
	PedalPort_Object * instMain_env_throttlePedal_pedalPeer;
	ButtonPort_Object * instMain_env_buttonStart_buttonPeer;
	ButtonPort_Object * instMain_env_buttonSet_buttonPeer;
	ButtonPort_Object * instMain_env_buttonPause_buttonPeer;
	ButtonPort_Object * instMain_env_buttonResume_buttonPeer;
	ButtonPort_Object * instMain_env_buttonInc_buttonPeer;
	ButtonPort_Object * instMain_env_buttonDec_buttonPeer;
	ButtonPort_Object * instMain_env_buttonStop_buttonPeer;
	EnvButtonsPort_Object * instMain_env_envButtonsPort;
	EnvPedalPort_Object * instMain_env_envClutchPedalPort;
	EnvPedalPort_Object * instMain_env_envBreakPedalPort;
	EnvPedalPort_Object * instMain_env_envThrottlePedalPort;
	EnvControlOnOffPort_Object * instMain_env_envControlOnOffPort;
	EnvSpeedPort_Object * instMain_env_envSpeedPort;
	EnvCruiseSpeedPort_Object * instMain_env_envCruiseSpeedPort;
	#ifdef WITH_OBSERVERS
	Obs_Object * instObs;
	#endif /* WITH_OBSERVERS */
};
extern PassiveObjects passiveObjects;

/**
 * Declaration of read-only properties types for superclasses.
 */
#define ABSTRACT_BUTTONSPROVIDER_PROPERTIES_RO 
#define ABSTRACT_CONTROLONOFFUSER_PROPERTIES_RO 
#define ABSTRACT_CRUISESPEEDUSER_PROPERTIES_RO 
#define ABSTRACT_PEDALPROVIDER_PROPERTIES_RO 
#define ABSTRACT_SPEEDPROVIDER_PROPERTIES_RO 
#define ABSTRACT_BUTTONSUSER_PROPERTIES_RO 
#define ABSTRACT_BUTTONPROVIDER_PROPERTIES_RO 
#define ABSTRACT_PEDALUSER_PROPERTIES_RO 
#define ABSTRACT_BUTTONUSER_PROPERTIES_RO 
#define ABSTRACT_CONTROLONOFFPROVIDER_PROPERTIES_RO 
#define ABSTRACT_SPEEDUSER_PROPERTIES_RO 
#define ABSTRACT_CRUISESPEEDPROVIDER_PROPERTIES_RO 
/**
 * Declaration of read-only properties types for classes.
 */
/**
 * The PedalPort_properties_ro type used to link instances of the PedalPort class with their properties.
 */
struct PedalPort_properties_ro {
	ABSTRACT_PEDALUSER_PROPERTIES_RO
	EnvPedalPort_Object * envPedalPort;
};
/**
 * The PedalsManagerPedalPort_properties_ro type used to link instances of the PedalsManagerPedalPort class with their properties.
 */
struct PedalsManagerPedalPort_properties_ro {
	ABSTRACT_PEDALPROVIDER_PROPERTIES_RO
	CCIPedalPort_Object * cciPedalPort;
};
/**
 * The CCI_properties_ro type used to link instances of the CCI class with their properties.
 */
struct CCI_properties_ro {
	CCISpeedPort_Object * speedPort;
	CCICruiseSpeedPort_Object * cruiseSpeedPort;
	Actuation_Object * actuation;
	CCIPedalPort_Object * throttlePedalPort;
	CCIPedalPort_Object * clutchPedalPort;
	PedalsManager_Object * pm;
	CCIButtonsPort_Object * buttonsPort;
	CCIPedalPort_Object * breakPedalPort;
	Controller_Object * controller;
	CruiseSpeedManager_Object * csm;
	CCIControlOnOffPort_Object * controlOnOffPort;
};
/**
 * The CruiseSpeedProvider_properties_ro type used to link instances of the CruiseSpeedProvider class with their properties.
 */
struct CruiseSpeedProvider_properties_ro {
};
/**
 * The ButtonProvider_properties_ro type used to link instances of the ButtonProvider class with their properties.
 */
struct ButtonProvider_properties_ro {
};
/**
 * The Observer1_properties_ro type used to link instances of the Observer1 class with their properties.
 */
struct Observer1_properties_ro {
};
/**
 * The Main_properties_ro type used to link instances of the Main class with their properties.
 */
struct Main_properties_ro {
	Env_Object * env;
	CCI_Object * cci;
};
/**
 * The ControlOnOffProvider_properties_ro type used to link instances of the ControlOnOffProvider class with their properties.
 */
struct ControlOnOffProvider_properties_ro {
};
/**
 * The Pedal_properties_ro type used to link instances of the Pedal class with their properties.
 */
struct Pedal_properties_ro {
	ABSTRACT_PEDALUSER_PROPERTIES_RO
	PedalPort_Object * pedalPeer;
};
/**
 * The CCIControlOnOffPort_properties_ro type used to link instances of the CCIControlOnOffPort class with their properties.
 */
struct CCIControlOnOffPort_properties_ro {
	ABSTRACT_CONTROLONOFFUSER_PROPERTIES_RO
	EnvControlOnOffPort_Object * envControlOnOffPort;
	Actuation_Object * actuation;
};
/**
 * The ButtonUser_properties_ro type used to link instances of the ButtonUser class with their properties.
 */
struct ButtonUser_properties_ro {
};
/**
 * The CCIButtonsPort_properties_ro type used to link instances of the CCIButtonsPort class with their properties.
 */
struct CCIButtonsPort_properties_ro {
	ABSTRACT_BUTTONSPROVIDER_PROPERTIES_RO
	EnvButtonsPort_Object * envButtonsPort;
	Controller_Object * controller;
};
/**
 * The Controller_properties_ro type used to link instances of the Controller class with their properties.
 */
struct Controller_properties_ro {
	ABSTRACT_BUTTONSPROVIDER_PROPERTIES_RO
	CCIButtonsPort_Object * cciButtonsPort;
	PedalsManager_Object * pm;
	Actuation_Object * actuation;
	CruiseSpeedManager_Object * csm;
};
/**
 * The Actuation_properties_ro type used to link instances of the Actuation class with their properties.
 */
struct Actuation_properties_ro {
	ABSTRACT_CONTROLONOFFUSER_PROPERTIES_RO
	CCIControlOnOffPort_Object * cciControlOnOffPort;
	CruiseSpeedManager_Object * csm;
	CCISpeedPort_Object * cciSpeedPort;
	Controller_Object * controller;
};
/**
 * The Engine_properties_ro type used to link instances of the Engine class with their properties.
 */
struct Engine_properties_ro {
	EnvControlOnOffPort_Object * envControlOnOffPort;
	EnvSpeedPort_Object * envSpeedPort;
	EnvCruiseSpeedPort_Object * envCruiseSpeedPort;
};
/**
 * The Env_properties_ro type used to link instances of the Env class with their properties.
 */
struct Env_properties_ro {
	EnvPedalPort_Object * envClutchPedalPort;
	GpioButton_Object * buttonStart;
	Engine_Object * engine;
	EnvControlOnOffPort_Object * envControlOnOffPort;
	Pedal_Object * throttlePedal;
	Buttons_Object * buttons;
	GpioButton_Object * buttonPause;
	GpioButton_Object * buttonDec;
	GpioButton_Object * buttonInc;
	EnvPedalPort_Object * envBreakPedalPort;
	EnvSpeedPort_Object * envSpeedPort;
	GpioButton_Object * buttonResume;
	EnvCruiseSpeedPort_Object * envCruiseSpeedPort;
	EnvButtonsPort_Object * envButtonsPort;
	GpioButton_Object * buttonSet;
	Pedal_Object * breakPedal;
	EnvPedalPort_Object * envThrottlePedalPort;
	Pedal_Object * clutchPedal;
	GpioButton_Object * buttonStop;
};
/**
 * The ButtonsProvider_properties_ro type used to link instances of the ButtonsProvider class with their properties.
 */
struct ButtonsProvider_properties_ro {
};
/**
 * The PedalProvider_properties_ro type used to link instances of the PedalProvider class with their properties.
 */
struct PedalProvider_properties_ro {
};
/**
 * The SpeedUser_properties_ro type used to link instances of the SpeedUser class with their properties.
 */
struct SpeedUser_properties_ro {
};
/**
 * The ControlOnOffUser_properties_ro type used to link instances of the ControlOnOffUser class with their properties.
 */
struct ControlOnOffUser_properties_ro {
};
/**
 * The Buttons_properties_ro type used to link instances of the Buttons class with their properties.
 */
struct Buttons_properties_ro {
	ABSTRACT_BUTTONSUSER_PROPERTIES_RO
	EnvButtonsPort_Object * envButtonsPort;
	ButtonsPort_Object * portDec;
	ButtonsPort_Object * portStart;
	ButtonsPort_Object * portResume;
	ButtonsPort_Object * portSet;
	ButtonsPort_Object * portStop;
	ButtonsPort_Object * portInc;
	ButtonsPort_Object * portPause;
};
/**
 * The PedalsManager_properties_ro type used to link instances of the PedalsManager class with their properties.
 */
struct PedalsManager_properties_ro {
	ABSTRACT_PEDALPROVIDER_PROPERTIES_RO
	PedalsManagerPedalPort_Object * pmBreakPedalPort;
	PedalsManagerPedalPort_Object * pmThrottlePedalPort;
	Controller_Object * controller;
	PedalsManagerPedalPort_Object * pmClutchPedalPort;
};
/**
 * The CruiseSpeedUser_properties_ro type used to link instances of the CruiseSpeedUser class with their properties.
 */
struct CruiseSpeedUser_properties_ro {
};
/**
 * The PedalUser_properties_ro type used to link instances of the PedalUser class with their properties.
 */
struct PedalUser_properties_ro {
};
/**
 * The ButtonsUser_properties_ro type used to link instances of the ButtonsUser class with their properties.
 */
struct ButtonsUser_properties_ro {
};
/**
 * The EnvButtonsPort_properties_ro type used to link instances of the EnvButtonsPort class with their properties.
 */
struct EnvButtonsPort_properties_ro {
	ABSTRACT_BUTTONSUSER_PROPERTIES_RO
	Buttons_Object * buttons;
	CCIButtonsPort_Object * cciButtonsPort;
};
/**
 * The EnvPedalPort_properties_ro type used to link instances of the EnvPedalPort class with their properties.
 */
struct EnvPedalPort_properties_ro {
	ABSTRACT_PEDALUSER_PROPERTIES_RO
	CCIPedalPort_Object * cciPedalPort;
	PedalPort_Object * pedal;
};
/**
 * The EnvControlOnOffPort_properties_ro type used to link instances of the EnvControlOnOffPort class with their properties.
 */
struct EnvControlOnOffPort_properties_ro {
	ABSTRACT_CONTROLONOFFPROVIDER_PROPERTIES_RO
	CCIControlOnOffPort_Object * cciControlOnOffPort;
	Engine_Object * engine;
};
/**
 * The ButtonPort_properties_ro type used to link instances of the ButtonPort class with their properties.
 */
struct ButtonPort_properties_ro {
	ABSTRACT_BUTTONUSER_PROPERTIES_RO
	ButtonsPort_Object * buttonsForDec;
	ButtonsPort_Object * buttonsForStop;
	ButtonsPort_Object * buttonsForStart;
	ButtonsPort_Object * buttonsForSet;
	ButtonsPort_Object * buttonsForPause;
	ButtonsPort_Object * buttonsForResume;
	ButtonsPort_Object * buttonsForInc;
};
/**
 * The CruiseSpeedManager_properties_ro type used to link instances of the CruiseSpeedManager class with their properties.
 */
struct CruiseSpeedManager_properties_ro {
	ABSTRACT_CRUISESPEEDUSER_PROPERTIES_RO
	Actuation_Object * actuation;
	CCICruiseSpeedPort_Object * cciCruiseSpeedPort;
	Controller_Object * controller;
};
/**
 * The SpeedProvider_properties_ro type used to link instances of the SpeedProvider class with their properties.
 */
struct SpeedProvider_properties_ro {
};
/**
 * The EnvSpeedPort_properties_ro type used to link instances of the EnvSpeedPort class with their properties.
 */
struct EnvSpeedPort_properties_ro {
	ABSTRACT_SPEEDUSER_PROPERTIES_RO
	Engine_Object * engine;
	CCISpeedPort_Object * cciSpeedPort;
};
/**
 * The Obs_properties_ro type used to link instances of the Obs class with their properties.
 */
struct Obs_properties_ro {
	Observer1_Object * observer1;
	Observer3_Object * observer3;
	Observer2_Object * observer2;
};
/**
 * The CCICruiseSpeedPort_properties_ro type used to link instances of the CCICruiseSpeedPort class with their properties.
 */
struct CCICruiseSpeedPort_properties_ro {
	ABSTRACT_CRUISESPEEDUSER_PROPERTIES_RO
	CruiseSpeedManager_Object * csm;
	EnvCruiseSpeedPort_Object * envCruiseSpeedPort;
};
/**
 * The EnvCruiseSpeedPort_properties_ro type used to link instances of the EnvCruiseSpeedPort class with their properties.
 */
struct EnvCruiseSpeedPort_properties_ro {
	ABSTRACT_CRUISESPEEDPROVIDER_PROPERTIES_RO
	Engine_Object * engine;
	CCICruiseSpeedPort_Object * cciCruiseSpeedPort;
};
/**
 * The GpioButton_properties_ro type used to link instances of the GpioButton class with their properties.
 */
struct GpioButton_properties_ro {
	ABSTRACT_BUTTONUSER_PROPERTIES_RO
	ButtonPort_Object * buttonPeer;
};
/**
 * The ButtonsPort_properties_ro type used to link instances of the ButtonsPort class with their properties.
 */
struct ButtonsPort_properties_ro {
	ABSTRACT_BUTTONPROVIDER_PROPERTIES_RO
	ButtonPort_Object * buttonSet;
	ButtonPort_Object * buttonStart;
	ButtonPort_Object * buttonResume;
	ButtonPort_Object * buttonDec;
	ButtonPort_Object * buttonStop;
	ButtonPort_Object * buttonInc;
	ButtonPort_Object * buttonPause;
};
/**
 * The Observer3_properties_ro type used to link instances of the Observer3 class with their properties.
 */
struct Observer3_properties_ro {
};
/**
 * The CCIPedalPort_properties_ro type used to link instances of the CCIPedalPort class with their properties.
 */
struct CCIPedalPort_properties_ro {
	ABSTRACT_PEDALPROVIDER_PROPERTIES_RO
	EnvPedalPort_Object * envPedalPort;
	PedalsManagerPedalPort_Object * pmPedalPort;
};
/**
 * The Observer2_properties_ro type used to link instances of the Observer2 class with their properties.
 */
struct Observer2_properties_ro {
};
/**
 * The CCISpeedPort_properties_ro type used to link instances of the CCISpeedPort class with their properties.
 */
struct CCISpeedPort_properties_ro {
	ABSTRACT_SPEEDPROVIDER_PROPERTIES_RO
	Actuation_Object * actuation;
	EnvSpeedPort_Object * envSpeedPort;
};
/**
 * The global read-only properties type used to make links between objects.
 */
struct PropertiesRO {
	Main_properties_ro instMain;
	CCI_properties_ro instMain_cci;
	Controller_properties_ro instMain_cci_controller;
	Actuation_properties_ro instMain_cci_actuation;
	CruiseSpeedManager_properties_ro instMain_cci_csm;
	PedalsManager_properties_ro instMain_cci_pm;
	PedalsManagerPedalPort_properties_ro instMain_cci_pm_pmClutchPedalPort;
	PedalsManagerPedalPort_properties_ro instMain_cci_pm_pmBreakPedalPort;
	PedalsManagerPedalPort_properties_ro instMain_cci_pm_pmThrottlePedalPort;
	CCIButtonsPort_properties_ro instMain_cci_buttonsPort;
	CCIPedalPort_properties_ro instMain_cci_clutchPedalPort;
	CCIPedalPort_properties_ro instMain_cci_breakPedalPort;
	CCIPedalPort_properties_ro instMain_cci_throttlePedalPort;
	CCIControlOnOffPort_properties_ro instMain_cci_controlOnOffPort;
	CCISpeedPort_properties_ro instMain_cci_speedPort;
	CCICruiseSpeedPort_properties_ro instMain_cci_cruiseSpeedPort;
	Env_properties_ro instMain_env;
	Buttons_properties_ro instMain_env_buttons;
	ButtonsPort_properties_ro instMain_env_buttons_portStart;
	ButtonsPort_properties_ro instMain_env_buttons_portSet;
	ButtonsPort_properties_ro instMain_env_buttons_portPause;
	ButtonsPort_properties_ro instMain_env_buttons_portResume;
	ButtonsPort_properties_ro instMain_env_buttons_portInc;
	ButtonsPort_properties_ro instMain_env_buttons_portDec;
	ButtonsPort_properties_ro instMain_env_buttons_portStop;
	Pedal_properties_ro instMain_env_clutchPedal;
	PedalPort_properties_ro instMain_env_clutchPedal_pedalPeer;
	Pedal_properties_ro instMain_env_breakPedal;
	PedalPort_properties_ro instMain_env_breakPedal_pedalPeer;
	Pedal_properties_ro instMain_env_throttlePedal;
	PedalPort_properties_ro instMain_env_throttlePedal_pedalPeer;
	Engine_properties_ro instMain_env_engine;
	GpioButton_properties_ro instMain_env_buttonStart;
	ButtonPort_properties_ro instMain_env_buttonStart_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonSet;
	ButtonPort_properties_ro instMain_env_buttonSet_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonPause;
	ButtonPort_properties_ro instMain_env_buttonPause_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonResume;
	ButtonPort_properties_ro instMain_env_buttonResume_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonInc;
	ButtonPort_properties_ro instMain_env_buttonInc_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonDec;
	ButtonPort_properties_ro instMain_env_buttonDec_buttonPeer;
	GpioButton_properties_ro instMain_env_buttonStop;
	ButtonPort_properties_ro instMain_env_buttonStop_buttonPeer;
	EnvButtonsPort_properties_ro instMain_env_envButtonsPort;
	EnvPedalPort_properties_ro instMain_env_envClutchPedalPort;
	EnvPedalPort_properties_ro instMain_env_envBreakPedalPort;
	EnvPedalPort_properties_ro instMain_env_envThrottlePedalPort;
	EnvControlOnOffPort_properties_ro instMain_env_envControlOnOffPort;
	EnvSpeedPort_properties_ro instMain_env_envSpeedPort;
	EnvCruiseSpeedPort_properties_ro instMain_env_envCruiseSpeedPort;
	#ifdef WITH_OBSERVERS
	Obs_properties_ro instObs;
	Observer1_properties_ro instObs_observer1;
	Observer2_properties_ro instObs_observer2;
	Observer3_properties_ro instObs_observer3;
	#endif /* WITH_OBSERVERS */
};
extern PropertiesRO properties_ro;

/**
 * The Ports type used to gather all ports.
 */
struct Ports {
	UML_Port * CCIEnvironment__POINT__Env__POINT__envButtonsPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envClutchPedalPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envBreakPedalPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envThrottlePedalPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envControlOnOffPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envSpeedPort;
	UML_Port * CCIEnvironment__POINT__Env__POINT__envCruiseSpeedPort;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portStart;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portSet;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portPause;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portResume;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portInc;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portDec;
	UML_Port * CCIEnvironment__POINT__Buttons__POINT__portStop;
	UML_Port * CCIEnvironment__POINT__Pedal__POINT__pedalPeer;
	UML_Port * DIL__POINT__GpioButton__POINT__buttonPeer;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__buttonsPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__clutchPedalPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__breakPedalPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__throttlePedalPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__controlOnOffPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__speedPort;
	UML_Port * CCISystem__POINT__system__POINT__CCI__POINT__cruiseSpeedPort;
	UML_Port * CCISystem__POINT__system__POINT__PedalsManager__POINT__pmClutchPedalPort;
	UML_Port * CCISystem__POINT__system__POINT__PedalsManager__POINT__pmBreakPedalPort;
	UML_Port * CCISystem__POINT__system__POINT__PedalsManager__POINT__pmThrottlePedalPort;
};
#ifdef EVENT_PORT_TAGGING
	extern Ports globalPorts;
#endif


#endif /* MODEL_H */
